<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)/Model.Common/bin/debug/Model.Common.dll" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


<#
	Model.Common.Entity.DataBase[] database= new  Model.Common.Entity.DataBase[]{
					new Model.Common.Entity.DataBase() {
						DataBaseName="dapper-test",
						NameSpace="dapper-test",
						ConnectionString="Data Source=10.211.55.2;Database=dapper-test;uid=root;pwd=mn;"
					 },
					new Model.Common.Entity.DataBase() {
						DataBaseName="cms",
						NameSpace="cms",
						ConnectionString="Data Source=10.211.55.2;Database=cms;uid=root;pwd=mn;"
					 }
				};
	foreach(var db in database)
	{
		var access=new Model.Common.MySQLDataStructure(db.ConnectionString);
		List<Model.Common.Entity.Table> tables=access.GetTables(db.DataBaseName);
#>
/// <summary>
/// Generated by T4 Template.DO NOT EDIT!
/// </summmary>
namespace Entity.<#=db.NameSpace.Replace("-","_") #> 
{
	using System;
	using System.Configuration;
	using System.Data;
	using MySql.Data.MySqlClient;
	using Dapper;
	
<#
	foreach(var item in tables)
	{
#>
	public class <#=item.TableName #>
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["<#=db.DataBaseName #>"].ToString();
<#
		foreach(var col in item.Columns)
        {
			var typeName=string.Empty;
			var type = new Model.Common.DataType().MysqlDataType[col.DataType];
			if(type==null)
				throw new NullReferenceException();
			typeName=type.ToString();
#>
		public <#=typeName #> <#=col.Name #> { get; set; }
<#
	}
#>
		#endregion property
		
		#region methods
		public int Insert()
		{
<#
			var fields = item.Columns.Where(m=>!m.IsAutoIncrease).Select(m=>m.Name).ToArray();
#>
			string sql="INSERT INTO `<#=item.DatabaseName #>`.`<#=item.TableName #>` (<#=string.Join(",", fields)#>)VALUES(<#=string.Join(",", fields.Select(m=>string.Format("@{0}",m)).ToArray())#>);";
			DynamicParameters para =new DynamicParameters();
<#
			for(var i=0;i< fields.Length;i++)
			{
#>
				para.Add("<#=string.Format("@{0}",fields[i]) #>", this.<#=fields[i] #>);
<#
            }
#>							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
<#
	}
#>
}

<#
}
#>