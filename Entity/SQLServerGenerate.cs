

/// <summary>
/// Generated by T4 Template.DO NOT EDIT!
/// </summmary>
namespace Entity.THLotteryDB 
{
	using System;
	using System.Configuration;
	using System.Collections.Generic;
	using System.Data;
	using System.Data.SqlClient;
	using Dapper;
	
	public class Pager
	{
		public int PageIndex { get; set; }
		public int PageSize { get; set; }
		public int Total { get; set; }
		public int PageCount { get { return (int)Math.Ceiling((double)Total/(double)PageSize); } }
		public object Data { get; set; }
	}
	public class Blacklist
	{
		#region property
		public int ID { get; set; }
		public int UserID { get; set; }
		public int PlatformID { get; set; }
		public int CreatorID { get; set; }
		public byte UserStatus { get; set; }
		public string Description { get; set; }
		public DateTime CreateTime { get; set; }
		#endregion property
		
	}
	public static class BlacklistExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Blacklist entity)
		{
			string sql="INSERT INTO [dbo].[Blacklist] (UserID,PlatformID,CreatorID,UserStatus,Description,CreateTime)VALUES(@UserID,@PlatformID,@CreatorID,@UserStatus,@Description,@CreateTime);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@UserID", entity.UserID);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@UserStatus", entity.UserStatus);
				para.Add("@Description", entity.Description);
				para.Add("@CreateTime", entity.CreateTime);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Blacklist> list)
		{
			string sql="INSERT INTO [dbo].[Blacklist] (UserID,PlatformID,CreatorID,UserStatus,Description,CreateTime)VALUES(@UserID,@PlatformID,@CreatorID,@UserStatus,@Description,@CreateTime);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@UserID", list[p].UserID);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@CreatorID", list[p].CreatorID);
					para[p].Add("@UserStatus", list[p].UserStatus);
					para[p].Add("@Description", list[p].Description);
					para[p].Add("@CreateTime", list[p].CreateTime);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Blacklist GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Blacklist] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Blacklist>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Blacklist entity)
		{
			string sql="UPDATE [dbo].[Blacklist] SET UserID=@UserID,PlatformID=@PlatformID,CreatorID=@CreatorID,UserStatus=@UserStatus,Description=@Description,CreateTime=@CreateTime WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@UserID", entity.UserID);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@UserStatus", entity.UserStatus);
				para.Add("@Description", entity.Description);
				para.Add("@CreateTime", entity.CreateTime);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Blacklist entity)
		{
			string sql="DELETE FROM [dbo].[Blacklist] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Blacklist> list)
		{
			string sql="UPDATE [dbo].[Blacklist] SET UserID=@UserID,PlatformID=@PlatformID,CreatorID=@CreatorID,UserStatus=@UserStatus,Description=@Description,CreateTime=@CreateTime WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@UserID", list[p].UserID);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@CreatorID", list[p].CreatorID);
				para[p].Add("@UserStatus", list[p].UserStatus);
				para[p].Add("@Description", list[p].Description);
				para[p].Add("@CreateTime", list[p].CreateTime);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Blacklist> list)
		{
			string sql="DELETE FROM [dbo].[Blacklist] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Blacklist] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Blacklist] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Blacklist GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Blacklist] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Blacklist>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Blacklist> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Blacklist] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Blacklist>(sql).AsList<Blacklist>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Blacklist] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Blacklist] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Blacklist] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Blacklist>(sql).AsList<Blacklist>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class CfgChip
	{
		#region property
		public int ID { get; set; }
		public long One { get; set; }
		public long Two { get; set; }
		public long Three { get; set; }
		public long Four { get; set; }
		public long Five { get; set; }
		public long Six { get; set; }
		public byte IsRichMan { get; set; }
		public long MaxLimit { get; set; }
		public int CreatorID { get; set; }
		public DateTime CreateTime { get; set; }
		public string IP { get; set; }
		public Nullable<long> MinLimit { get; set; }
		public Nullable<int> StepValue { get; set; }
		public int PlatformID { get; set; }
		#endregion property
		
	}
	public static class CfgChipExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this CfgChip entity)
		{
			string sql="INSERT INTO [dbo].[CfgChip] (One,Two,Three,Four,Five,Six,IsRichMan,MaxLimit,CreatorID,CreateTime,IP,MinLimit,StepValue,PlatformID)VALUES(@One,@Two,@Three,@Four,@Five,@Six,@IsRichMan,@MaxLimit,@CreatorID,@CreateTime,@IP,@MinLimit,@StepValue,@PlatformID);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@One", entity.One);
				para.Add("@Two", entity.Two);
				para.Add("@Three", entity.Three);
				para.Add("@Four", entity.Four);
				para.Add("@Five", entity.Five);
				para.Add("@Six", entity.Six);
				para.Add("@IsRichMan", entity.IsRichMan);
				para.Add("@MaxLimit", entity.MaxLimit);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
				para.Add("@MinLimit", entity.MinLimit);
				para.Add("@StepValue", entity.StepValue);
				para.Add("@PlatformID", entity.PlatformID);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<CfgChip> list)
		{
			string sql="INSERT INTO [dbo].[CfgChip] (One,Two,Three,Four,Five,Six,IsRichMan,MaxLimit,CreatorID,CreateTime,IP,MinLimit,StepValue,PlatformID)VALUES(@One,@Two,@Three,@Four,@Five,@Six,@IsRichMan,@MaxLimit,@CreatorID,@CreateTime,@IP,@MinLimit,@StepValue,@PlatformID);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@One", list[p].One);
					para[p].Add("@Two", list[p].Two);
					para[p].Add("@Three", list[p].Three);
					para[p].Add("@Four", list[p].Four);
					para[p].Add("@Five", list[p].Five);
					para[p].Add("@Six", list[p].Six);
					para[p].Add("@IsRichMan", list[p].IsRichMan);
					para[p].Add("@MaxLimit", list[p].MaxLimit);
					para[p].Add("@CreatorID", list[p].CreatorID);
					para[p].Add("@CreateTime", list[p].CreateTime);
					para[p].Add("@IP", list[p].IP);
					para[p].Add("@MinLimit", list[p].MinLimit);
					para[p].Add("@StepValue", list[p].StepValue);
					para[p].Add("@PlatformID", list[p].PlatformID);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static CfgChip GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgChip] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<CfgChip>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this CfgChip entity)
		{
			string sql="UPDATE [dbo].[CfgChip] SET One=@One,Two=@Two,Three=@Three,Four=@Four,Five=@Five,Six=@Six,IsRichMan=@IsRichMan,MaxLimit=@MaxLimit,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP,MinLimit=@MinLimit,StepValue=@StepValue,PlatformID=@PlatformID WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@One", entity.One);
				para.Add("@Two", entity.Two);
				para.Add("@Three", entity.Three);
				para.Add("@Four", entity.Four);
				para.Add("@Five", entity.Five);
				para.Add("@Six", entity.Six);
				para.Add("@IsRichMan", entity.IsRichMan);
				para.Add("@MaxLimit", entity.MaxLimit);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
				para.Add("@MinLimit", entity.MinLimit);
				para.Add("@StepValue", entity.StepValue);
				para.Add("@PlatformID", entity.PlatformID);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this CfgChip entity)
		{
			string sql="DELETE FROM [dbo].[CfgChip] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<CfgChip> list)
		{
			string sql="UPDATE [dbo].[CfgChip] SET One=@One,Two=@Two,Three=@Three,Four=@Four,Five=@Five,Six=@Six,IsRichMan=@IsRichMan,MaxLimit=@MaxLimit,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP,MinLimit=@MinLimit,StepValue=@StepValue,PlatformID=@PlatformID WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@One", list[p].One);
				para[p].Add("@Two", list[p].Two);
				para[p].Add("@Three", list[p].Three);
				para[p].Add("@Four", list[p].Four);
				para[p].Add("@Five", list[p].Five);
				para[p].Add("@Six", list[p].Six);
				para[p].Add("@IsRichMan", list[p].IsRichMan);
				para[p].Add("@MaxLimit", list[p].MaxLimit);
				para[p].Add("@CreatorID", list[p].CreatorID);
				para[p].Add("@CreateTime", list[p].CreateTime);
				para[p].Add("@IP", list[p].IP);
				para[p].Add("@MinLimit", list[p].MinLimit);
				para[p].Add("@StepValue", list[p].StepValue);
				para[p].Add("@PlatformID", list[p].PlatformID);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<CfgChip> list)
		{
			string sql="DELETE FROM [dbo].[CfgChip] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[CfgChip] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[CfgChip] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static CfgChip GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgChip] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<CfgChip>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<CfgChip> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgChip] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<CfgChip>(sql).AsList<CfgChip>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[CfgChip] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[CfgChip] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[CfgChip] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<CfgChip>(sql).AsList<CfgChip>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class CfgInRoomRule
	{
		#region property
		public int ID { get; set; }
		public int SitDownLImit { get; set; }
		public byte Type { get; set; }
		public byte NoBetLimit { get; set; }
		public int CreatorID { get; set; }
		public DateTime CreateTime { get; set; }
		public string IP { get; set; }
		#endregion property
		
	}
	public static class CfgInRoomRuleExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this CfgInRoomRule entity)
		{
			string sql="INSERT INTO [dbo].[CfgInRoomRule] (SitDownLImit,Type,NoBetLimit,CreatorID,CreateTime,IP)VALUES(@SitDownLImit,@Type,@NoBetLimit,@CreatorID,@CreateTime,@IP);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@SitDownLImit", entity.SitDownLImit);
				para.Add("@Type", entity.Type);
				para.Add("@NoBetLimit", entity.NoBetLimit);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<CfgInRoomRule> list)
		{
			string sql="INSERT INTO [dbo].[CfgInRoomRule] (SitDownLImit,Type,NoBetLimit,CreatorID,CreateTime,IP)VALUES(@SitDownLImit,@Type,@NoBetLimit,@CreatorID,@CreateTime,@IP);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@SitDownLImit", list[p].SitDownLImit);
					para[p].Add("@Type", list[p].Type);
					para[p].Add("@NoBetLimit", list[p].NoBetLimit);
					para[p].Add("@CreatorID", list[p].CreatorID);
					para[p].Add("@CreateTime", list[p].CreateTime);
					para[p].Add("@IP", list[p].IP);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static CfgInRoomRule GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgInRoomRule] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<CfgInRoomRule>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this CfgInRoomRule entity)
		{
			string sql="UPDATE [dbo].[CfgInRoomRule] SET Type=@Type,NoBetLimit=@NoBetLimit,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@SitDownLImit", entity.SitDownLImit);
				para.Add("@Type", entity.Type);
				para.Add("@NoBetLimit", entity.NoBetLimit);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this CfgInRoomRule entity)
		{
			string sql="DELETE FROM [dbo].[CfgInRoomRule] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<CfgInRoomRule> list)
		{
			string sql="UPDATE [dbo].[CfgInRoomRule] SET Type=@Type,NoBetLimit=@NoBetLimit,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@SitDownLImit", list[p].SitDownLImit);
				para[p].Add("@Type", list[p].Type);
				para[p].Add("@NoBetLimit", list[p].NoBetLimit);
				para[p].Add("@CreatorID", list[p].CreatorID);
				para[p].Add("@CreateTime", list[p].CreateTime);
				para[p].Add("@IP", list[p].IP);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<CfgInRoomRule> list)
		{
			string sql="DELETE FROM [dbo].[CfgInRoomRule] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[CfgInRoomRule] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[CfgInRoomRule] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static CfgInRoomRule GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgInRoomRule] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<CfgInRoomRule>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<CfgInRoomRule> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgInRoomRule] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<CfgInRoomRule>(sql).AsList<CfgInRoomRule>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[CfgInRoomRule] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[CfgInRoomRule] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[CfgInRoomRule] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<CfgInRoomRule>(sql).AsList<CfgInRoomRule>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class CfgServiceCharge
	{
		#region property
		public int ID { get; set; }
		public int ServiceCharge { get; set; }
		public int BankerWinAll { get; set; }
		public int BankerLoseAll { get; set; }
		public byte type1 { get; set; }
		public byte type2 { get; set; }
		public int CreatorID { get; set; }
		public DateTime CreateTime { get; set; }
		public string IP { get; set; }
		public Nullable<int> PlatformID { get; set; }
		#endregion property
		
	}
	public static class CfgServiceChargeExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this CfgServiceCharge entity)
		{
			string sql="INSERT INTO [dbo].[CfgServiceCharge] (ServiceCharge,BankerWinAll,BankerLoseAll,type1,type2,CreatorID,CreateTime,IP,PlatformID)VALUES(@ServiceCharge,@BankerWinAll,@BankerLoseAll,@type1,@type2,@CreatorID,@CreateTime,@IP,@PlatformID);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@ServiceCharge", entity.ServiceCharge);
				para.Add("@BankerWinAll", entity.BankerWinAll);
				para.Add("@BankerLoseAll", entity.BankerLoseAll);
				para.Add("@type1", entity.type1);
				para.Add("@type2", entity.type2);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
				para.Add("@PlatformID", entity.PlatformID);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<CfgServiceCharge> list)
		{
			string sql="INSERT INTO [dbo].[CfgServiceCharge] (ServiceCharge,BankerWinAll,BankerLoseAll,type1,type2,CreatorID,CreateTime,IP,PlatformID)VALUES(@ServiceCharge,@BankerWinAll,@BankerLoseAll,@type1,@type2,@CreatorID,@CreateTime,@IP,@PlatformID);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@ServiceCharge", list[p].ServiceCharge);
					para[p].Add("@BankerWinAll", list[p].BankerWinAll);
					para[p].Add("@BankerLoseAll", list[p].BankerLoseAll);
					para[p].Add("@type1", list[p].type1);
					para[p].Add("@type2", list[p].type2);
					para[p].Add("@CreatorID", list[p].CreatorID);
					para[p].Add("@CreateTime", list[p].CreateTime);
					para[p].Add("@IP", list[p].IP);
					para[p].Add("@PlatformID", list[p].PlatformID);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static CfgServiceCharge GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgServiceCharge] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<CfgServiceCharge>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this CfgServiceCharge entity)
		{
			string sql="UPDATE [dbo].[CfgServiceCharge] SET ServiceCharge=@ServiceCharge,BankerWinAll=@BankerWinAll,BankerLoseAll=@BankerLoseAll,type1=@type1,type2=@type2,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP,PlatformID=@PlatformID WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@ServiceCharge", entity.ServiceCharge);
				para.Add("@BankerWinAll", entity.BankerWinAll);
				para.Add("@BankerLoseAll", entity.BankerLoseAll);
				para.Add("@type1", entity.type1);
				para.Add("@type2", entity.type2);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
				para.Add("@PlatformID", entity.PlatformID);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this CfgServiceCharge entity)
		{
			string sql="DELETE FROM [dbo].[CfgServiceCharge] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<CfgServiceCharge> list)
		{
			string sql="UPDATE [dbo].[CfgServiceCharge] SET ServiceCharge=@ServiceCharge,BankerWinAll=@BankerWinAll,BankerLoseAll=@BankerLoseAll,type1=@type1,type2=@type2,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP,PlatformID=@PlatformID WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ServiceCharge", list[p].ServiceCharge);
				para[p].Add("@BankerWinAll", list[p].BankerWinAll);
				para[p].Add("@BankerLoseAll", list[p].BankerLoseAll);
				para[p].Add("@type1", list[p].type1);
				para[p].Add("@type2", list[p].type2);
				para[p].Add("@CreatorID", list[p].CreatorID);
				para[p].Add("@CreateTime", list[p].CreateTime);
				para[p].Add("@IP", list[p].IP);
				para[p].Add("@PlatformID", list[p].PlatformID);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<CfgServiceCharge> list)
		{
			string sql="DELETE FROM [dbo].[CfgServiceCharge] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[CfgServiceCharge] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[CfgServiceCharge] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static CfgServiceCharge GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgServiceCharge] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<CfgServiceCharge>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<CfgServiceCharge> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgServiceCharge] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<CfgServiceCharge>(sql).AsList<CfgServiceCharge>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[CfgServiceCharge] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[CfgServiceCharge] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[CfgServiceCharge] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<CfgServiceCharge>(sql).AsList<CfgServiceCharge>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class CfgTime
	{
		#region property
		public int ID { get; set; }
		public string StartTime { get; set; }
		public string StopTime { get; set; }
		public int BankerApplyInterval { get; set; }
		public int BetTimeInterval { get; set; }
		public int StopBetTimeInterval { get; set; }
		public int BalanceTimeInterval { get; set; }
		public int SettlementTime { get; set; }
		public int WarningTime { get; set; }
		public int CreatorID { get; set; }
		public DateTime CreateTime { get; set; }
		public string IP { get; set; }
		#endregion property
		
	}
	public static class CfgTimeExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this CfgTime entity)
		{
			string sql="INSERT INTO [dbo].[CfgTime] (StartTime,StopTime,BankerApplyInterval,BetTimeInterval,StopBetTimeInterval,BalanceTimeInterval,SettlementTime,WarningTime,CreatorID,CreateTime,IP)VALUES(@StartTime,@StopTime,@BankerApplyInterval,@BetTimeInterval,@StopBetTimeInterval,@BalanceTimeInterval,@SettlementTime,@WarningTime,@CreatorID,@CreateTime,@IP);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@StartTime", entity.StartTime);
				para.Add("@StopTime", entity.StopTime);
				para.Add("@BankerApplyInterval", entity.BankerApplyInterval);
				para.Add("@BetTimeInterval", entity.BetTimeInterval);
				para.Add("@StopBetTimeInterval", entity.StopBetTimeInterval);
				para.Add("@BalanceTimeInterval", entity.BalanceTimeInterval);
				para.Add("@SettlementTime", entity.SettlementTime);
				para.Add("@WarningTime", entity.WarningTime);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<CfgTime> list)
		{
			string sql="INSERT INTO [dbo].[CfgTime] (StartTime,StopTime,BankerApplyInterval,BetTimeInterval,StopBetTimeInterval,BalanceTimeInterval,SettlementTime,WarningTime,CreatorID,CreateTime,IP)VALUES(@StartTime,@StopTime,@BankerApplyInterval,@BetTimeInterval,@StopBetTimeInterval,@BalanceTimeInterval,@SettlementTime,@WarningTime,@CreatorID,@CreateTime,@IP);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@StartTime", list[p].StartTime);
					para[p].Add("@StopTime", list[p].StopTime);
					para[p].Add("@BankerApplyInterval", list[p].BankerApplyInterval);
					para[p].Add("@BetTimeInterval", list[p].BetTimeInterval);
					para[p].Add("@StopBetTimeInterval", list[p].StopBetTimeInterval);
					para[p].Add("@BalanceTimeInterval", list[p].BalanceTimeInterval);
					para[p].Add("@SettlementTime", list[p].SettlementTime);
					para[p].Add("@WarningTime", list[p].WarningTime);
					para[p].Add("@CreatorID", list[p].CreatorID);
					para[p].Add("@CreateTime", list[p].CreateTime);
					para[p].Add("@IP", list[p].IP);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static CfgTime GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgTime] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<CfgTime>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this CfgTime entity)
		{
			string sql="UPDATE [dbo].[CfgTime] SET StartTime=@StartTime,StopTime=@StopTime,BankerApplyInterval=@BankerApplyInterval,BetTimeInterval=@BetTimeInterval,StopBetTimeInterval=@StopBetTimeInterval,BalanceTimeInterval=@BalanceTimeInterval,SettlementTime=@SettlementTime,WarningTime=@WarningTime,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@StartTime", entity.StartTime);
				para.Add("@StopTime", entity.StopTime);
				para.Add("@BankerApplyInterval", entity.BankerApplyInterval);
				para.Add("@BetTimeInterval", entity.BetTimeInterval);
				para.Add("@StopBetTimeInterval", entity.StopBetTimeInterval);
				para.Add("@BalanceTimeInterval", entity.BalanceTimeInterval);
				para.Add("@SettlementTime", entity.SettlementTime);
				para.Add("@WarningTime", entity.WarningTime);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this CfgTime entity)
		{
			string sql="DELETE FROM [dbo].[CfgTime] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<CfgTime> list)
		{
			string sql="UPDATE [dbo].[CfgTime] SET StartTime=@StartTime,StopTime=@StopTime,BankerApplyInterval=@BankerApplyInterval,BetTimeInterval=@BetTimeInterval,StopBetTimeInterval=@StopBetTimeInterval,BalanceTimeInterval=@BalanceTimeInterval,SettlementTime=@SettlementTime,WarningTime=@WarningTime,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@StartTime", list[p].StartTime);
				para[p].Add("@StopTime", list[p].StopTime);
				para[p].Add("@BankerApplyInterval", list[p].BankerApplyInterval);
				para[p].Add("@BetTimeInterval", list[p].BetTimeInterval);
				para[p].Add("@StopBetTimeInterval", list[p].StopBetTimeInterval);
				para[p].Add("@BalanceTimeInterval", list[p].BalanceTimeInterval);
				para[p].Add("@SettlementTime", list[p].SettlementTime);
				para[p].Add("@WarningTime", list[p].WarningTime);
				para[p].Add("@CreatorID", list[p].CreatorID);
				para[p].Add("@CreateTime", list[p].CreateTime);
				para[p].Add("@IP", list[p].IP);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<CfgTime> list)
		{
			string sql="DELETE FROM [dbo].[CfgTime] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[CfgTime] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[CfgTime] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static CfgTime GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgTime] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<CfgTime>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<CfgTime> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[CfgTime] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<CfgTime>(sql).AsList<CfgTime>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[CfgTime] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[CfgTime] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[CfgTime] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<CfgTime>(sql).AsList<CfgTime>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Doubtfullist
	{
		#region property
		public int ID { get; set; }
		public int UserID { get; set; }
		public int PlatformID { get; set; }
		public int CreatorID { get; set; }
		public byte UserStatus { get; set; }
		public string Description { get; set; }
		public DateTime CreateTime { get; set; }
		#endregion property
		
	}
	public static class DoubtfullistExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Doubtfullist entity)
		{
			string sql="INSERT INTO [dbo].[Doubtfullist] (UserID,PlatformID,CreatorID,UserStatus,Description,CreateTime)VALUES(@UserID,@PlatformID,@CreatorID,@UserStatus,@Description,@CreateTime);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@UserID", entity.UserID);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@UserStatus", entity.UserStatus);
				para.Add("@Description", entity.Description);
				para.Add("@CreateTime", entity.CreateTime);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Doubtfullist> list)
		{
			string sql="INSERT INTO [dbo].[Doubtfullist] (UserID,PlatformID,CreatorID,UserStatus,Description,CreateTime)VALUES(@UserID,@PlatformID,@CreatorID,@UserStatus,@Description,@CreateTime);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@UserID", list[p].UserID);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@CreatorID", list[p].CreatorID);
					para[p].Add("@UserStatus", list[p].UserStatus);
					para[p].Add("@Description", list[p].Description);
					para[p].Add("@CreateTime", list[p].CreateTime);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Doubtfullist GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Doubtfullist] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Doubtfullist>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Doubtfullist entity)
		{
			string sql="UPDATE [dbo].[Doubtfullist] SET UserID=@UserID,PlatformID=@PlatformID,CreatorID=@CreatorID,UserStatus=@UserStatus,Description=@Description,CreateTime=@CreateTime WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@UserID", entity.UserID);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@UserStatus", entity.UserStatus);
				para.Add("@Description", entity.Description);
				para.Add("@CreateTime", entity.CreateTime);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Doubtfullist entity)
		{
			string sql="DELETE FROM [dbo].[Doubtfullist] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Doubtfullist> list)
		{
			string sql="UPDATE [dbo].[Doubtfullist] SET UserID=@UserID,PlatformID=@PlatformID,CreatorID=@CreatorID,UserStatus=@UserStatus,Description=@Description,CreateTime=@CreateTime WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@UserID", list[p].UserID);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@CreatorID", list[p].CreatorID);
				para[p].Add("@UserStatus", list[p].UserStatus);
				para[p].Add("@Description", list[p].Description);
				para[p].Add("@CreateTime", list[p].CreateTime);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Doubtfullist> list)
		{
			string sql="DELETE FROM [dbo].[Doubtfullist] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Doubtfullist] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Doubtfullist] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Doubtfullist GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Doubtfullist] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Doubtfullist>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Doubtfullist> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Doubtfullist] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Doubtfullist>(sql).AsList<Doubtfullist>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Doubtfullist] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Doubtfullist] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Doubtfullist] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Doubtfullist>(sql).AsList<Doubtfullist>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class FlowInfo
	{
		#region property
		public int ID { get; set; }
		public string FlowID { get; set; }
		public string OrderNo { get; set; }
		public long LotteryID { get; set; }
		public int UserID { get; set; }
		public int RoomID { get; set; }
		public int TableId { get; set; }
		public byte CarID { get; set; }
		public byte Type { get; set; }
		public long BetScore { get; set; }
		public long Score { get; set; }
		public DateTime DateTime { get; set; }
		public Nullable<int> PlatformID { get; set; }
		public Nullable<byte> IsBilling { get; set; }
		public Nullable<byte> IsRefund { get; set; }
		#endregion property
		
	}
	public static class FlowInfoExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this FlowInfo entity)
		{
			string sql="INSERT INTO [dbo].[FlowInfo] (FlowID,OrderNo,LotteryID,UserID,RoomID,TableId,CarID,Type,BetScore,Score,DateTime,PlatformID,IsBilling,IsRefund)VALUES(@FlowID,@OrderNo,@LotteryID,@UserID,@RoomID,@TableId,@CarID,@Type,@BetScore,@Score,@DateTime,@PlatformID,@IsBilling,@IsRefund);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@FlowID", entity.FlowID);
				para.Add("@OrderNo", entity.OrderNo);
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@UserID", entity.UserID);
				para.Add("@RoomID", entity.RoomID);
				para.Add("@TableId", entity.TableId);
				para.Add("@CarID", entity.CarID);
				para.Add("@Type", entity.Type);
				para.Add("@BetScore", entity.BetScore);
				para.Add("@Score", entity.Score);
				para.Add("@DateTime", entity.DateTime);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@IsBilling", entity.IsBilling);
				para.Add("@IsRefund", entity.IsRefund);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<FlowInfo> list)
		{
			string sql="INSERT INTO [dbo].[FlowInfo] (FlowID,OrderNo,LotteryID,UserID,RoomID,TableId,CarID,Type,BetScore,Score,DateTime,PlatformID,IsBilling,IsRefund)VALUES(@FlowID,@OrderNo,@LotteryID,@UserID,@RoomID,@TableId,@CarID,@Type,@BetScore,@Score,@DateTime,@PlatformID,@IsBilling,@IsRefund);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@FlowID", list[p].FlowID);
					para[p].Add("@OrderNo", list[p].OrderNo);
					para[p].Add("@LotteryID", list[p].LotteryID);
					para[p].Add("@UserID", list[p].UserID);
					para[p].Add("@RoomID", list[p].RoomID);
					para[p].Add("@TableId", list[p].TableId);
					para[p].Add("@CarID", list[p].CarID);
					para[p].Add("@Type", list[p].Type);
					para[p].Add("@BetScore", list[p].BetScore);
					para[p].Add("@Score", list[p].Score);
					para[p].Add("@DateTime", list[p].DateTime);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@IsBilling", list[p].IsBilling);
					para[p].Add("@IsRefund", list[p].IsRefund);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static FlowInfo GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[FlowInfo] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<FlowInfo>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this FlowInfo entity)
		{
			string sql="UPDATE [dbo].[FlowInfo] SET FlowID=@FlowID,OrderNo=@OrderNo,LotteryID=@LotteryID,UserID=@UserID,RoomID=@RoomID,TableId=@TableId,CarID=@CarID,Type=@Type,BetScore=@BetScore,Score=@Score,DateTime=@DateTime,PlatformID=@PlatformID,IsBilling=@IsBilling,IsRefund=@IsRefund WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@FlowID", entity.FlowID);
				para.Add("@OrderNo", entity.OrderNo);
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@UserID", entity.UserID);
				para.Add("@RoomID", entity.RoomID);
				para.Add("@TableId", entity.TableId);
				para.Add("@CarID", entity.CarID);
				para.Add("@Type", entity.Type);
				para.Add("@BetScore", entity.BetScore);
				para.Add("@Score", entity.Score);
				para.Add("@DateTime", entity.DateTime);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@IsBilling", entity.IsBilling);
				para.Add("@IsRefund", entity.IsRefund);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this FlowInfo entity)
		{
			string sql="DELETE FROM [dbo].[FlowInfo] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<FlowInfo> list)
		{
			string sql="UPDATE [dbo].[FlowInfo] SET FlowID=@FlowID,OrderNo=@OrderNo,LotteryID=@LotteryID,UserID=@UserID,RoomID=@RoomID,TableId=@TableId,CarID=@CarID,Type=@Type,BetScore=@BetScore,Score=@Score,DateTime=@DateTime,PlatformID=@PlatformID,IsBilling=@IsBilling,IsRefund=@IsRefund WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@FlowID", list[p].FlowID);
				para[p].Add("@OrderNo", list[p].OrderNo);
				para[p].Add("@LotteryID", list[p].LotteryID);
				para[p].Add("@UserID", list[p].UserID);
				para[p].Add("@RoomID", list[p].RoomID);
				para[p].Add("@TableId", list[p].TableId);
				para[p].Add("@CarID", list[p].CarID);
				para[p].Add("@Type", list[p].Type);
				para[p].Add("@BetScore", list[p].BetScore);
				para[p].Add("@Score", list[p].Score);
				para[p].Add("@DateTime", list[p].DateTime);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@IsBilling", list[p].IsBilling);
				para[p].Add("@IsRefund", list[p].IsRefund);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<FlowInfo> list)
		{
			string sql="DELETE FROM [dbo].[FlowInfo] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[FlowInfo] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[FlowInfo] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static FlowInfo GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[FlowInfo] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<FlowInfo>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<FlowInfo> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[FlowInfo] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<FlowInfo>(sql).AsList<FlowInfo>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[FlowInfo] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[FlowInfo] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[FlowInfo] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<FlowInfo>(sql).AsList<FlowInfo>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class FlowInfoHistory
	{
		#region property
		public int ID { get; set; }
		public string FlowID { get; set; }
		public string OrderNo { get; set; }
		public long LotteryID { get; set; }
		public int UserID { get; set; }
		public int RoomID { get; set; }
		public int TableId { get; set; }
		public byte CarID { get; set; }
		public byte Type { get; set; }
		public long BetScore { get; set; }
		public long Score { get; set; }
		public DateTime DateTime { get; set; }
		public Nullable<int> PlatformID { get; set; }
		public Nullable<byte> IsBilling { get; set; }
		public Nullable<byte> IsRefund { get; set; }
		#endregion property
		
	}
	public static class FlowInfoHistoryExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this FlowInfoHistory entity)
		{
			string sql="INSERT INTO [dbo].[FlowInfoHistory] (FlowID,OrderNo,LotteryID,UserID,RoomID,TableId,CarID,Type,BetScore,Score,DateTime,PlatformID,IsBilling,IsRefund)VALUES(@FlowID,@OrderNo,@LotteryID,@UserID,@RoomID,@TableId,@CarID,@Type,@BetScore,@Score,@DateTime,@PlatformID,@IsBilling,@IsRefund);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@FlowID", entity.FlowID);
				para.Add("@OrderNo", entity.OrderNo);
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@UserID", entity.UserID);
				para.Add("@RoomID", entity.RoomID);
				para.Add("@TableId", entity.TableId);
				para.Add("@CarID", entity.CarID);
				para.Add("@Type", entity.Type);
				para.Add("@BetScore", entity.BetScore);
				para.Add("@Score", entity.Score);
				para.Add("@DateTime", entity.DateTime);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@IsBilling", entity.IsBilling);
				para.Add("@IsRefund", entity.IsRefund);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<FlowInfoHistory> list)
		{
			string sql="INSERT INTO [dbo].[FlowInfoHistory] (FlowID,OrderNo,LotteryID,UserID,RoomID,TableId,CarID,Type,BetScore,Score,DateTime,PlatformID,IsBilling,IsRefund)VALUES(@FlowID,@OrderNo,@LotteryID,@UserID,@RoomID,@TableId,@CarID,@Type,@BetScore,@Score,@DateTime,@PlatformID,@IsBilling,@IsRefund);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@FlowID", list[p].FlowID);
					para[p].Add("@OrderNo", list[p].OrderNo);
					para[p].Add("@LotteryID", list[p].LotteryID);
					para[p].Add("@UserID", list[p].UserID);
					para[p].Add("@RoomID", list[p].RoomID);
					para[p].Add("@TableId", list[p].TableId);
					para[p].Add("@CarID", list[p].CarID);
					para[p].Add("@Type", list[p].Type);
					para[p].Add("@BetScore", list[p].BetScore);
					para[p].Add("@Score", list[p].Score);
					para[p].Add("@DateTime", list[p].DateTime);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@IsBilling", list[p].IsBilling);
					para[p].Add("@IsRefund", list[p].IsRefund);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static FlowInfoHistory GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[FlowInfoHistory] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<FlowInfoHistory>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this FlowInfoHistory entity)
		{
			string sql="UPDATE [dbo].[FlowInfoHistory] SET FlowID=@FlowID,OrderNo=@OrderNo,LotteryID=@LotteryID,UserID=@UserID,RoomID=@RoomID,TableId=@TableId,CarID=@CarID,Type=@Type,BetScore=@BetScore,Score=@Score,DateTime=@DateTime,PlatformID=@PlatformID,IsBilling=@IsBilling,IsRefund=@IsRefund WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@FlowID", entity.FlowID);
				para.Add("@OrderNo", entity.OrderNo);
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@UserID", entity.UserID);
				para.Add("@RoomID", entity.RoomID);
				para.Add("@TableId", entity.TableId);
				para.Add("@CarID", entity.CarID);
				para.Add("@Type", entity.Type);
				para.Add("@BetScore", entity.BetScore);
				para.Add("@Score", entity.Score);
				para.Add("@DateTime", entity.DateTime);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@IsBilling", entity.IsBilling);
				para.Add("@IsRefund", entity.IsRefund);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this FlowInfoHistory entity)
		{
			string sql="DELETE FROM [dbo].[FlowInfoHistory] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<FlowInfoHistory> list)
		{
			string sql="UPDATE [dbo].[FlowInfoHistory] SET FlowID=@FlowID,OrderNo=@OrderNo,LotteryID=@LotteryID,UserID=@UserID,RoomID=@RoomID,TableId=@TableId,CarID=@CarID,Type=@Type,BetScore=@BetScore,Score=@Score,DateTime=@DateTime,PlatformID=@PlatformID,IsBilling=@IsBilling,IsRefund=@IsRefund WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@FlowID", list[p].FlowID);
				para[p].Add("@OrderNo", list[p].OrderNo);
				para[p].Add("@LotteryID", list[p].LotteryID);
				para[p].Add("@UserID", list[p].UserID);
				para[p].Add("@RoomID", list[p].RoomID);
				para[p].Add("@TableId", list[p].TableId);
				para[p].Add("@CarID", list[p].CarID);
				para[p].Add("@Type", list[p].Type);
				para[p].Add("@BetScore", list[p].BetScore);
				para[p].Add("@Score", list[p].Score);
				para[p].Add("@DateTime", list[p].DateTime);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@IsBilling", list[p].IsBilling);
				para[p].Add("@IsRefund", list[p].IsRefund);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<FlowInfoHistory> list)
		{
			string sql="DELETE FROM [dbo].[FlowInfoHistory] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[FlowInfoHistory] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[FlowInfoHistory] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static FlowInfoHistory GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[FlowInfoHistory] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<FlowInfoHistory>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<FlowInfoHistory> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[FlowInfoHistory] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<FlowInfoHistory>(sql).AsList<FlowInfoHistory>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[FlowInfoHistory] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[FlowInfoHistory] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[FlowInfoHistory] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<FlowInfoHistory>(sql).AsList<FlowInfoHistory>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class GameFinancialConfirm
	{
		#region property
		public int Id { get; set; }
		public long LotteryId { get; set; }
		public bool IsGameTimeValid { get; set; }
		public bool IsWinLostValid { get; set; }
		public long BankerChip { get; set; }
		public long OtherPlayerChipSum { get; set; }
		public long BankerValue { get; set; }
		public long OtherPlayerSum { get; set; }
		public long ServiceFee { get; set; }
		public int ChargePercentage { get; set; }
		public string HTML { get; set; }
		public DateTime CreateTime { get; set; }
		#endregion property
		
	}
	public static class GameFinancialConfirmExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this GameFinancialConfirm entity)
		{
			string sql="INSERT INTO [dbo].[GameFinancialConfirm] (LotteryId,IsGameTimeValid,IsWinLostValid,BankerChip,OtherPlayerChipSum,BankerValue,OtherPlayerSum,ServiceFee,ChargePercentage,HTML,CreateTime)VALUES(@LotteryId,@IsGameTimeValid,@IsWinLostValid,@BankerChip,@OtherPlayerChipSum,@BankerValue,@OtherPlayerSum,@ServiceFee,@ChargePercentage,@HTML,@CreateTime);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@LotteryId", entity.LotteryId);
				para.Add("@IsGameTimeValid", entity.IsGameTimeValid);
				para.Add("@IsWinLostValid", entity.IsWinLostValid);
				para.Add("@BankerChip", entity.BankerChip);
				para.Add("@OtherPlayerChipSum", entity.OtherPlayerChipSum);
				para.Add("@BankerValue", entity.BankerValue);
				para.Add("@OtherPlayerSum", entity.OtherPlayerSum);
				para.Add("@ServiceFee", entity.ServiceFee);
				para.Add("@ChargePercentage", entity.ChargePercentage);
				para.Add("@HTML", entity.HTML);
				para.Add("@CreateTime", entity.CreateTime);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<GameFinancialConfirm> list)
		{
			string sql="INSERT INTO [dbo].[GameFinancialConfirm] (LotteryId,IsGameTimeValid,IsWinLostValid,BankerChip,OtherPlayerChipSum,BankerValue,OtherPlayerSum,ServiceFee,ChargePercentage,HTML,CreateTime)VALUES(@LotteryId,@IsGameTimeValid,@IsWinLostValid,@BankerChip,@OtherPlayerChipSum,@BankerValue,@OtherPlayerSum,@ServiceFee,@ChargePercentage,@HTML,@CreateTime);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@LotteryId", list[p].LotteryId);
					para[p].Add("@IsGameTimeValid", list[p].IsGameTimeValid);
					para[p].Add("@IsWinLostValid", list[p].IsWinLostValid);
					para[p].Add("@BankerChip", list[p].BankerChip);
					para[p].Add("@OtherPlayerChipSum", list[p].OtherPlayerChipSum);
					para[p].Add("@BankerValue", list[p].BankerValue);
					para[p].Add("@OtherPlayerSum", list[p].OtherPlayerSum);
					para[p].Add("@ServiceFee", list[p].ServiceFee);
					para[p].Add("@ChargePercentage", list[p].ChargePercentage);
					para[p].Add("@HTML", list[p].HTML);
					para[p].Add("@CreateTime", list[p].CreateTime);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static GameFinancialConfirm GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[GameFinancialConfirm] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<GameFinancialConfirm>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this GameFinancialConfirm entity)
		{
			string sql="UPDATE [dbo].[GameFinancialConfirm] SET LotteryId=@LotteryId,IsGameTimeValid=@IsGameTimeValid,IsWinLostValid=@IsWinLostValid,BankerChip=@BankerChip,OtherPlayerChipSum=@OtherPlayerChipSum,BankerValue=@BankerValue,OtherPlayerSum=@OtherPlayerSum,ServiceFee=@ServiceFee,ChargePercentage=@ChargePercentage,HTML=@HTML,CreateTime=@CreateTime WHERE Id=@Id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@LotteryId", entity.LotteryId);
				para.Add("@IsGameTimeValid", entity.IsGameTimeValid);
				para.Add("@IsWinLostValid", entity.IsWinLostValid);
				para.Add("@BankerChip", entity.BankerChip);
				para.Add("@OtherPlayerChipSum", entity.OtherPlayerChipSum);
				para.Add("@BankerValue", entity.BankerValue);
				para.Add("@OtherPlayerSum", entity.OtherPlayerSum);
				para.Add("@ServiceFee", entity.ServiceFee);
				para.Add("@ChargePercentage", entity.ChargePercentage);
				para.Add("@HTML", entity.HTML);
				para.Add("@CreateTime", entity.CreateTime);
		
			para.Add("@Id", entity.Id);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this GameFinancialConfirm entity)
		{
			string sql="DELETE FROM [dbo].[GameFinancialConfirm] WHERE Id=@Id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@Id", entity.Id);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<GameFinancialConfirm> list)
		{
			string sql="UPDATE [dbo].[GameFinancialConfirm] SET LotteryId=@LotteryId,IsGameTimeValid=@IsGameTimeValid,IsWinLostValid=@IsWinLostValid,BankerChip=@BankerChip,OtherPlayerChipSum=@OtherPlayerChipSum,BankerValue=@BankerValue,OtherPlayerSum=@OtherPlayerSum,ServiceFee=@ServiceFee,ChargePercentage=@ChargePercentage,HTML=@HTML,CreateTime=@CreateTime WHERE Id=@Id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@LotteryId", list[p].LotteryId);
				para[p].Add("@IsGameTimeValid", list[p].IsGameTimeValid);
				para[p].Add("@IsWinLostValid", list[p].IsWinLostValid);
				para[p].Add("@BankerChip", list[p].BankerChip);
				para[p].Add("@OtherPlayerChipSum", list[p].OtherPlayerChipSum);
				para[p].Add("@BankerValue", list[p].BankerValue);
				para[p].Add("@OtherPlayerSum", list[p].OtherPlayerSum);
				para[p].Add("@ServiceFee", list[p].ServiceFee);
				para[p].Add("@ChargePercentage", list[p].ChargePercentage);
				para[p].Add("@HTML", list[p].HTML);
				para[p].Add("@CreateTime", list[p].CreateTime);
			
				para[p].Add("@Id", list[p].Id);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<GameFinancialConfirm> list)
		{
			string sql="DELETE FROM [dbo].[GameFinancialConfirm] WHERE Id=@Id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@Id", list[p].Id);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[GameFinancialConfirm] WHERE Id=@Id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@Id", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[GameFinancialConfirm] WHERE Id=@Id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@Id", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static GameFinancialConfirm GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[GameFinancialConfirm] WHERE Id=@Id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@Id", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<GameFinancialConfirm>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<GameFinancialConfirm> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[GameFinancialConfirm] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<GameFinancialConfirm>(sql).AsList<GameFinancialConfirm>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="Id DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[GameFinancialConfirm] WHERE {1} AND Id NOT IN (SELECT TOP {2} Id FROM [dbo].[GameFinancialConfirm] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[GameFinancialConfirm] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<GameFinancialConfirm>(sql).AsList<GameFinancialConfirm>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class GameResultRecord
	{
		#region property
		public long ID { get; set; }
		public Nullable<short> RoomID { get; set; }
		public Nullable<short> TableID { get; set; }
		public Nullable<long> LotteryID { get; set; }
		public string LotteryResult { get; set; }
		public Nullable<DateTime> CollectTime { get; set; }
		public Nullable<DateTime> BetTime { get; set; }
		public Nullable<DateTime> StopBetTime { get; set; }
		public Nullable<DateTime> BalanceTime { get; set; }
		public Nullable<byte> IsAutoCollect { get; set; }
		public Nullable<bool> IsDelete { get; set; }
		public Nullable<byte> BalanceState { get; set; }
		public Nullable<long> NextLotteryID { get; set; }
		#endregion property
		
	}
	public static class GameResultRecordExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this GameResultRecord entity)
		{
			string sql="INSERT INTO [dbo].[GameResultRecord] (RoomID,TableID,LotteryID,LotteryResult,CollectTime,BetTime,StopBetTime,BalanceTime,IsAutoCollect,IsDelete,BalanceState,NextLotteryID)VALUES(@RoomID,@TableID,@LotteryID,@LotteryResult,@CollectTime,@BetTime,@StopBetTime,@BalanceTime,@IsAutoCollect,@IsDelete,@BalanceState,@NextLotteryID);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@RoomID", entity.RoomID);
				para.Add("@TableID", entity.TableID);
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@LotteryResult", entity.LotteryResult);
				para.Add("@CollectTime", entity.CollectTime);
				para.Add("@BetTime", entity.BetTime);
				para.Add("@StopBetTime", entity.StopBetTime);
				para.Add("@BalanceTime", entity.BalanceTime);
				para.Add("@IsAutoCollect", entity.IsAutoCollect);
				para.Add("@IsDelete", entity.IsDelete);
				para.Add("@BalanceState", entity.BalanceState);
				para.Add("@NextLotteryID", entity.NextLotteryID);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<GameResultRecord> list)
		{
			string sql="INSERT INTO [dbo].[GameResultRecord] (RoomID,TableID,LotteryID,LotteryResult,CollectTime,BetTime,StopBetTime,BalanceTime,IsAutoCollect,IsDelete,BalanceState,NextLotteryID)VALUES(@RoomID,@TableID,@LotteryID,@LotteryResult,@CollectTime,@BetTime,@StopBetTime,@BalanceTime,@IsAutoCollect,@IsDelete,@BalanceState,@NextLotteryID);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@RoomID", list[p].RoomID);
					para[p].Add("@TableID", list[p].TableID);
					para[p].Add("@LotteryID", list[p].LotteryID);
					para[p].Add("@LotteryResult", list[p].LotteryResult);
					para[p].Add("@CollectTime", list[p].CollectTime);
					para[p].Add("@BetTime", list[p].BetTime);
					para[p].Add("@StopBetTime", list[p].StopBetTime);
					para[p].Add("@BalanceTime", list[p].BalanceTime);
					para[p].Add("@IsAutoCollect", list[p].IsAutoCollect);
					para[p].Add("@IsDelete", list[p].IsDelete);
					para[p].Add("@BalanceState", list[p].BalanceState);
					para[p].Add("@NextLotteryID", list[p].NextLotteryID);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static GameResultRecord GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[GameResultRecord] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<GameResultRecord>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this GameResultRecord entity)
		{
			string sql="UPDATE [dbo].[GameResultRecord] SET RoomID=@RoomID,TableID=@TableID,LotteryID=@LotteryID,LotteryResult=@LotteryResult,CollectTime=@CollectTime,BetTime=@BetTime,StopBetTime=@StopBetTime,BalanceTime=@BalanceTime,IsAutoCollect=@IsAutoCollect,IsDelete=@IsDelete,BalanceState=@BalanceState,NextLotteryID=@NextLotteryID WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@RoomID", entity.RoomID);
				para.Add("@TableID", entity.TableID);
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@LotteryResult", entity.LotteryResult);
				para.Add("@CollectTime", entity.CollectTime);
				para.Add("@BetTime", entity.BetTime);
				para.Add("@StopBetTime", entity.StopBetTime);
				para.Add("@BalanceTime", entity.BalanceTime);
				para.Add("@IsAutoCollect", entity.IsAutoCollect);
				para.Add("@IsDelete", entity.IsDelete);
				para.Add("@BalanceState", entity.BalanceState);
				para.Add("@NextLotteryID", entity.NextLotteryID);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this GameResultRecord entity)
		{
			string sql="DELETE FROM [dbo].[GameResultRecord] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<GameResultRecord> list)
		{
			string sql="UPDATE [dbo].[GameResultRecord] SET RoomID=@RoomID,TableID=@TableID,LotteryID=@LotteryID,LotteryResult=@LotteryResult,CollectTime=@CollectTime,BetTime=@BetTime,StopBetTime=@StopBetTime,BalanceTime=@BalanceTime,IsAutoCollect=@IsAutoCollect,IsDelete=@IsDelete,BalanceState=@BalanceState,NextLotteryID=@NextLotteryID WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@RoomID", list[p].RoomID);
				para[p].Add("@TableID", list[p].TableID);
				para[p].Add("@LotteryID", list[p].LotteryID);
				para[p].Add("@LotteryResult", list[p].LotteryResult);
				para[p].Add("@CollectTime", list[p].CollectTime);
				para[p].Add("@BetTime", list[p].BetTime);
				para[p].Add("@StopBetTime", list[p].StopBetTime);
				para[p].Add("@BalanceTime", list[p].BalanceTime);
				para[p].Add("@IsAutoCollect", list[p].IsAutoCollect);
				para[p].Add("@IsDelete", list[p].IsDelete);
				para[p].Add("@BalanceState", list[p].BalanceState);
				para[p].Add("@NextLotteryID", list[p].NextLotteryID);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<GameResultRecord> list)
		{
			string sql="DELETE FROM [dbo].[GameResultRecord] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(long[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[GameResultRecord] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(long primaryKey)
		{
			string sql="DELETE FROM [dbo].[GameResultRecord] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static GameResultRecord GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[GameResultRecord] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<GameResultRecord>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<GameResultRecord> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[GameResultRecord] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<GameResultRecord>(sql).AsList<GameResultRecord>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[GameResultRecord] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[GameResultRecord] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[GameResultRecord] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<GameResultRecord>(sql).AsList<GameResultRecord>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class HistoryFlowConfirm
	{
		#region property
		public int Id { get; set; }
		public string FlowID { get; set; }
		public long LotteryID { get; set; }
		public int UserId { get; set; }
		public int PlatformId { get; set; }
		public int RoomId { get; set; }
		public int TableId { get; set; }
		public bool IsGameTimeValid { get; set; }
		public Nullable<bool> IsChipValueValid { get; set; }
		public bool IsAllChipValueValid { get; set; }
		public Nullable<bool> IsWinLostValid { get; set; }
		public Nullable<bool> BankerWinEqualsOtherWin { get; set; }
		public Nullable<bool> HasPayback { get; set; }
		public Nullable<bool> IsPaybackValid { get; set; }
		public Nullable<bool> IsServiceFeeValid { get; set; }
		public string DetailHTML { get; set; }
		public DateTime HistoryTime { get; set; }
		public DateTime CreateTime { get; set; }
		public string RelateFlowId { get; set; }
		#endregion property
		
	}
	public static class HistoryFlowConfirmExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this HistoryFlowConfirm entity)
		{
			string sql="INSERT INTO [dbo].[HistoryFlowConfirm] (FlowID,LotteryID,UserId,PlatformId,RoomId,TableId,IsGameTimeValid,IsChipValueValid,IsAllChipValueValid,IsWinLostValid,BankerWinEqualsOtherWin,HasPayback,IsPaybackValid,IsServiceFeeValid,DetailHTML,HistoryTime,CreateTime,RelateFlowId)VALUES(@FlowID,@LotteryID,@UserId,@PlatformId,@RoomId,@TableId,@IsGameTimeValid,@IsChipValueValid,@IsAllChipValueValid,@IsWinLostValid,@BankerWinEqualsOtherWin,@HasPayback,@IsPaybackValid,@IsServiceFeeValid,@DetailHTML,@HistoryTime,@CreateTime,@RelateFlowId);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@FlowID", entity.FlowID);
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@UserId", entity.UserId);
				para.Add("@PlatformId", entity.PlatformId);
				para.Add("@RoomId", entity.RoomId);
				para.Add("@TableId", entity.TableId);
				para.Add("@IsGameTimeValid", entity.IsGameTimeValid);
				para.Add("@IsChipValueValid", entity.IsChipValueValid);
				para.Add("@IsAllChipValueValid", entity.IsAllChipValueValid);
				para.Add("@IsWinLostValid", entity.IsWinLostValid);
				para.Add("@BankerWinEqualsOtherWin", entity.BankerWinEqualsOtherWin);
				para.Add("@HasPayback", entity.HasPayback);
				para.Add("@IsPaybackValid", entity.IsPaybackValid);
				para.Add("@IsServiceFeeValid", entity.IsServiceFeeValid);
				para.Add("@DetailHTML", entity.DetailHTML);
				para.Add("@HistoryTime", entity.HistoryTime);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@RelateFlowId", entity.RelateFlowId);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<HistoryFlowConfirm> list)
		{
			string sql="INSERT INTO [dbo].[HistoryFlowConfirm] (FlowID,LotteryID,UserId,PlatformId,RoomId,TableId,IsGameTimeValid,IsChipValueValid,IsAllChipValueValid,IsWinLostValid,BankerWinEqualsOtherWin,HasPayback,IsPaybackValid,IsServiceFeeValid,DetailHTML,HistoryTime,CreateTime,RelateFlowId)VALUES(@FlowID,@LotteryID,@UserId,@PlatformId,@RoomId,@TableId,@IsGameTimeValid,@IsChipValueValid,@IsAllChipValueValid,@IsWinLostValid,@BankerWinEqualsOtherWin,@HasPayback,@IsPaybackValid,@IsServiceFeeValid,@DetailHTML,@HistoryTime,@CreateTime,@RelateFlowId);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@FlowID", list[p].FlowID);
					para[p].Add("@LotteryID", list[p].LotteryID);
					para[p].Add("@UserId", list[p].UserId);
					para[p].Add("@PlatformId", list[p].PlatformId);
					para[p].Add("@RoomId", list[p].RoomId);
					para[p].Add("@TableId", list[p].TableId);
					para[p].Add("@IsGameTimeValid", list[p].IsGameTimeValid);
					para[p].Add("@IsChipValueValid", list[p].IsChipValueValid);
					para[p].Add("@IsAllChipValueValid", list[p].IsAllChipValueValid);
					para[p].Add("@IsWinLostValid", list[p].IsWinLostValid);
					para[p].Add("@BankerWinEqualsOtherWin", list[p].BankerWinEqualsOtherWin);
					para[p].Add("@HasPayback", list[p].HasPayback);
					para[p].Add("@IsPaybackValid", list[p].IsPaybackValid);
					para[p].Add("@IsServiceFeeValid", list[p].IsServiceFeeValid);
					para[p].Add("@DetailHTML", list[p].DetailHTML);
					para[p].Add("@HistoryTime", list[p].HistoryTime);
					para[p].Add("@CreateTime", list[p].CreateTime);
					para[p].Add("@RelateFlowId", list[p].RelateFlowId);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static HistoryFlowConfirm GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[HistoryFlowConfirm] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<HistoryFlowConfirm>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this HistoryFlowConfirm entity)
		{
			string sql="UPDATE [dbo].[HistoryFlowConfirm] SET FlowID=@FlowID,LotteryID=@LotteryID,UserId=@UserId,PlatformId=@PlatformId,RoomId=@RoomId,TableId=@TableId,IsGameTimeValid=@IsGameTimeValid,IsChipValueValid=@IsChipValueValid,IsAllChipValueValid=@IsAllChipValueValid,IsWinLostValid=@IsWinLostValid,BankerWinEqualsOtherWin=@BankerWinEqualsOtherWin,HasPayback=@HasPayback,IsPaybackValid=@IsPaybackValid,IsServiceFeeValid=@IsServiceFeeValid,DetailHTML=@DetailHTML,HistoryTime=@HistoryTime,CreateTime=@CreateTime,RelateFlowId=@RelateFlowId WHERE Id=@Id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@FlowID", entity.FlowID);
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@UserId", entity.UserId);
				para.Add("@PlatformId", entity.PlatformId);
				para.Add("@RoomId", entity.RoomId);
				para.Add("@TableId", entity.TableId);
				para.Add("@IsGameTimeValid", entity.IsGameTimeValid);
				para.Add("@IsChipValueValid", entity.IsChipValueValid);
				para.Add("@IsAllChipValueValid", entity.IsAllChipValueValid);
				para.Add("@IsWinLostValid", entity.IsWinLostValid);
				para.Add("@BankerWinEqualsOtherWin", entity.BankerWinEqualsOtherWin);
				para.Add("@HasPayback", entity.HasPayback);
				para.Add("@IsPaybackValid", entity.IsPaybackValid);
				para.Add("@IsServiceFeeValid", entity.IsServiceFeeValid);
				para.Add("@DetailHTML", entity.DetailHTML);
				para.Add("@HistoryTime", entity.HistoryTime);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@RelateFlowId", entity.RelateFlowId);
		
			para.Add("@Id", entity.Id);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this HistoryFlowConfirm entity)
		{
			string sql="DELETE FROM [dbo].[HistoryFlowConfirm] WHERE Id=@Id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@Id", entity.Id);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<HistoryFlowConfirm> list)
		{
			string sql="UPDATE [dbo].[HistoryFlowConfirm] SET FlowID=@FlowID,LotteryID=@LotteryID,UserId=@UserId,PlatformId=@PlatformId,RoomId=@RoomId,TableId=@TableId,IsGameTimeValid=@IsGameTimeValid,IsChipValueValid=@IsChipValueValid,IsAllChipValueValid=@IsAllChipValueValid,IsWinLostValid=@IsWinLostValid,BankerWinEqualsOtherWin=@BankerWinEqualsOtherWin,HasPayback=@HasPayback,IsPaybackValid=@IsPaybackValid,IsServiceFeeValid=@IsServiceFeeValid,DetailHTML=@DetailHTML,HistoryTime=@HistoryTime,CreateTime=@CreateTime,RelateFlowId=@RelateFlowId WHERE Id=@Id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@FlowID", list[p].FlowID);
				para[p].Add("@LotteryID", list[p].LotteryID);
				para[p].Add("@UserId", list[p].UserId);
				para[p].Add("@PlatformId", list[p].PlatformId);
				para[p].Add("@RoomId", list[p].RoomId);
				para[p].Add("@TableId", list[p].TableId);
				para[p].Add("@IsGameTimeValid", list[p].IsGameTimeValid);
				para[p].Add("@IsChipValueValid", list[p].IsChipValueValid);
				para[p].Add("@IsAllChipValueValid", list[p].IsAllChipValueValid);
				para[p].Add("@IsWinLostValid", list[p].IsWinLostValid);
				para[p].Add("@BankerWinEqualsOtherWin", list[p].BankerWinEqualsOtherWin);
				para[p].Add("@HasPayback", list[p].HasPayback);
				para[p].Add("@IsPaybackValid", list[p].IsPaybackValid);
				para[p].Add("@IsServiceFeeValid", list[p].IsServiceFeeValid);
				para[p].Add("@DetailHTML", list[p].DetailHTML);
				para[p].Add("@HistoryTime", list[p].HistoryTime);
				para[p].Add("@CreateTime", list[p].CreateTime);
				para[p].Add("@RelateFlowId", list[p].RelateFlowId);
			
				para[p].Add("@Id", list[p].Id);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<HistoryFlowConfirm> list)
		{
			string sql="DELETE FROM [dbo].[HistoryFlowConfirm] WHERE Id=@Id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@Id", list[p].Id);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[HistoryFlowConfirm] WHERE Id=@Id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@Id", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[HistoryFlowConfirm] WHERE Id=@Id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@Id", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static HistoryFlowConfirm GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[HistoryFlowConfirm] WHERE Id=@Id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@Id", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<HistoryFlowConfirm>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<HistoryFlowConfirm> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[HistoryFlowConfirm] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<HistoryFlowConfirm>(sql).AsList<HistoryFlowConfirm>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="Id DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[HistoryFlowConfirm] WHERE {1} AND Id NOT IN (SELECT TOP {2} Id FROM [dbo].[HistoryFlowConfirm] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[HistoryFlowConfirm] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<HistoryFlowConfirm>(sql).AsList<HistoryFlowConfirm>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class LotteryResult
	{
		#region property
		public int ID { get; set; }
		public int LotteryID { get; set; }
		public Nullable<DateTime> DateLine { get; set; }
		public string Result { get; set; }
		public Nullable<int> IsManual { get; set; }
		public Nullable<int> PlatformID { get; set; }
		public Nullable<int> NextLotteryID { get; set; }
		public Nullable<byte> StopGame { get; set; }
		public string StopDescription { get; set; }
		public string CreatorID { get; set; }
		public DateTime CreateTime { get; set; }
		public string CreatorIP { get; set; }
		public Nullable<DateTime> UpdateTime { get; set; }
		#endregion property
		
	}
	public static class LotteryResultExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this LotteryResult entity)
		{
			string sql="INSERT INTO [dbo].[LotteryResult] (LotteryID,DateLine,Result,IsManual,PlatformID,NextLotteryID,StopGame,StopDescription,CreatorID,CreateTime,CreatorIP,UpdateTime)VALUES(@LotteryID,@DateLine,@Result,@IsManual,@PlatformID,@NextLotteryID,@StopGame,@StopDescription,@CreatorID,@CreateTime,@CreatorIP,@UpdateTime);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@DateLine", entity.DateLine);
				para.Add("@Result", entity.Result);
				para.Add("@IsManual", entity.IsManual);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@NextLotteryID", entity.NextLotteryID);
				para.Add("@StopGame", entity.StopGame);
				para.Add("@StopDescription", entity.StopDescription);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@CreatorIP", entity.CreatorIP);
				para.Add("@UpdateTime", entity.UpdateTime);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<LotteryResult> list)
		{
			string sql="INSERT INTO [dbo].[LotteryResult] (LotteryID,DateLine,Result,IsManual,PlatformID,NextLotteryID,StopGame,StopDescription,CreatorID,CreateTime,CreatorIP,UpdateTime)VALUES(@LotteryID,@DateLine,@Result,@IsManual,@PlatformID,@NextLotteryID,@StopGame,@StopDescription,@CreatorID,@CreateTime,@CreatorIP,@UpdateTime);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@LotteryID", list[p].LotteryID);
					para[p].Add("@DateLine", list[p].DateLine);
					para[p].Add("@Result", list[p].Result);
					para[p].Add("@IsManual", list[p].IsManual);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@NextLotteryID", list[p].NextLotteryID);
					para[p].Add("@StopGame", list[p].StopGame);
					para[p].Add("@StopDescription", list[p].StopDescription);
					para[p].Add("@CreatorID", list[p].CreatorID);
					para[p].Add("@CreateTime", list[p].CreateTime);
					para[p].Add("@CreatorIP", list[p].CreatorIP);
					para[p].Add("@UpdateTime", list[p].UpdateTime);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static LotteryResult GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[LotteryResult] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<LotteryResult>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this LotteryResult entity)
		{
			string sql="UPDATE [dbo].[LotteryResult] SET DateLine=@DateLine,Result=@Result,IsManual=@IsManual,PlatformID=@PlatformID,NextLotteryID=@NextLotteryID,StopGame=@StopGame,StopDescription=@StopDescription,CreatorID=@CreatorID,CreateTime=@CreateTime,CreatorIP=@CreatorIP,UpdateTime=@UpdateTime WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@LotteryID", entity.LotteryID);
				para.Add("@DateLine", entity.DateLine);
				para.Add("@Result", entity.Result);
				para.Add("@IsManual", entity.IsManual);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@NextLotteryID", entity.NextLotteryID);
				para.Add("@StopGame", entity.StopGame);
				para.Add("@StopDescription", entity.StopDescription);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@CreatorIP", entity.CreatorIP);
				para.Add("@UpdateTime", entity.UpdateTime);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this LotteryResult entity)
		{
			string sql="DELETE FROM [dbo].[LotteryResult] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<LotteryResult> list)
		{
			string sql="UPDATE [dbo].[LotteryResult] SET DateLine=@DateLine,Result=@Result,IsManual=@IsManual,PlatformID=@PlatformID,NextLotteryID=@NextLotteryID,StopGame=@StopGame,StopDescription=@StopDescription,CreatorID=@CreatorID,CreateTime=@CreateTime,CreatorIP=@CreatorIP,UpdateTime=@UpdateTime WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@LotteryID", list[p].LotteryID);
				para[p].Add("@DateLine", list[p].DateLine);
				para[p].Add("@Result", list[p].Result);
				para[p].Add("@IsManual", list[p].IsManual);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@NextLotteryID", list[p].NextLotteryID);
				para[p].Add("@StopGame", list[p].StopGame);
				para[p].Add("@StopDescription", list[p].StopDescription);
				para[p].Add("@CreatorID", list[p].CreatorID);
				para[p].Add("@CreateTime", list[p].CreateTime);
				para[p].Add("@CreatorIP", list[p].CreatorIP);
				para[p].Add("@UpdateTime", list[p].UpdateTime);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<LotteryResult> list)
		{
			string sql="DELETE FROM [dbo].[LotteryResult] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[LotteryResult] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[LotteryResult] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static LotteryResult GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[LotteryResult] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<LotteryResult>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<LotteryResult> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[LotteryResult] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<LotteryResult>(sql).AsList<LotteryResult>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[LotteryResult] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[LotteryResult] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[LotteryResult] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<LotteryResult>(sql).AsList<LotteryResult>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class PassWordErrRecord
	{
		#region property
		public int ID { get; set; }
		public int UserID { get; set; }
		public DateTime logonTime { get; set; }
		#endregion property
		
	}
	public static class PassWordErrRecordExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this PassWordErrRecord entity)
		{
			string sql="INSERT INTO [dbo].[PassWordErrRecord] (UserID,logonTime)VALUES(@UserID,@logonTime);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@UserID", entity.UserID);
				para.Add("@logonTime", entity.logonTime);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<PassWordErrRecord> list)
		{
			string sql="INSERT INTO [dbo].[PassWordErrRecord] (UserID,logonTime)VALUES(@UserID,@logonTime);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@UserID", list[p].UserID);
					para[p].Add("@logonTime", list[p].logonTime);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static PassWordErrRecord GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[PassWordErrRecord] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<PassWordErrRecord>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this PassWordErrRecord entity)
		{
			string sql="UPDATE [dbo].[PassWordErrRecord] SET UserID=@UserID,logonTime=@logonTime WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@UserID", entity.UserID);
				para.Add("@logonTime", entity.logonTime);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this PassWordErrRecord entity)
		{
			string sql="DELETE FROM [dbo].[PassWordErrRecord] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<PassWordErrRecord> list)
		{
			string sql="UPDATE [dbo].[PassWordErrRecord] SET UserID=@UserID,logonTime=@logonTime WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@UserID", list[p].UserID);
				para[p].Add("@logonTime", list[p].logonTime);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<PassWordErrRecord> list)
		{
			string sql="DELETE FROM [dbo].[PassWordErrRecord] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[PassWordErrRecord] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[PassWordErrRecord] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static PassWordErrRecord GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[PassWordErrRecord] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<PassWordErrRecord>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<PassWordErrRecord> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[PassWordErrRecord] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<PassWordErrRecord>(sql).AsList<PassWordErrRecord>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[PassWordErrRecord] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[PassWordErrRecord] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[PassWordErrRecord] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<PassWordErrRecord>(sql).AsList<PassWordErrRecord>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Api_ErrorLog
	{
		#region property
		public int ID { get; set; }
		public int ErrorCode { get; set; }
		public string ErrorMSG { get; set; }
		public string ErrorContent { get; set; }
		public Nullable<int> PlatformID { get; set; }
		public string Accounts { get; set; }
		public Nullable<long> AccountMoney { get; set; }
		public string FlowID { get; set; }
		public Nullable<DateTime> ErrorTime { get; set; }
		public string IP { get; set; }
		#endregion property
		
	}
	public static class Web_Api_ErrorLogExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Api_ErrorLog entity)
		{
			string sql="INSERT INTO [dbo].[Web_Api_ErrorLog] (ErrorCode,ErrorMSG,ErrorContent,PlatformID,Accounts,AccountMoney,FlowID,ErrorTime,IP)VALUES(@ErrorCode,@ErrorMSG,@ErrorContent,@PlatformID,@Accounts,@AccountMoney,@FlowID,@ErrorTime,@IP);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@ErrorCode", entity.ErrorCode);
				para.Add("@ErrorMSG", entity.ErrorMSG);
				para.Add("@ErrorContent", entity.ErrorContent);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@Accounts", entity.Accounts);
				para.Add("@AccountMoney", entity.AccountMoney);
				para.Add("@FlowID", entity.FlowID);
				para.Add("@ErrorTime", entity.ErrorTime);
				para.Add("@IP", entity.IP);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Api_ErrorLog> list)
		{
			string sql="INSERT INTO [dbo].[Web_Api_ErrorLog] (ErrorCode,ErrorMSG,ErrorContent,PlatformID,Accounts,AccountMoney,FlowID,ErrorTime,IP)VALUES(@ErrorCode,@ErrorMSG,@ErrorContent,@PlatformID,@Accounts,@AccountMoney,@FlowID,@ErrorTime,@IP);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@ErrorCode", list[p].ErrorCode);
					para[p].Add("@ErrorMSG", list[p].ErrorMSG);
					para[p].Add("@ErrorContent", list[p].ErrorContent);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@Accounts", list[p].Accounts);
					para[p].Add("@AccountMoney", list[p].AccountMoney);
					para[p].Add("@FlowID", list[p].FlowID);
					para[p].Add("@ErrorTime", list[p].ErrorTime);
					para[p].Add("@IP", list[p].IP);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Api_ErrorLog GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Api_ErrorLog] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Api_ErrorLog>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Api_ErrorLog entity)
		{
			string sql="UPDATE [dbo].[Web_Api_ErrorLog] SET ErrorCode=@ErrorCode,ErrorMSG=@ErrorMSG,ErrorContent=@ErrorContent,PlatformID=@PlatformID,Accounts=@Accounts,AccountMoney=@AccountMoney,FlowID=@FlowID,ErrorTime=@ErrorTime,IP=@IP WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@ErrorCode", entity.ErrorCode);
				para.Add("@ErrorMSG", entity.ErrorMSG);
				para.Add("@ErrorContent", entity.ErrorContent);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@Accounts", entity.Accounts);
				para.Add("@AccountMoney", entity.AccountMoney);
				para.Add("@FlowID", entity.FlowID);
				para.Add("@ErrorTime", entity.ErrorTime);
				para.Add("@IP", entity.IP);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Api_ErrorLog entity)
		{
			string sql="DELETE FROM [dbo].[Web_Api_ErrorLog] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Api_ErrorLog> list)
		{
			string sql="UPDATE [dbo].[Web_Api_ErrorLog] SET ErrorCode=@ErrorCode,ErrorMSG=@ErrorMSG,ErrorContent=@ErrorContent,PlatformID=@PlatformID,Accounts=@Accounts,AccountMoney=@AccountMoney,FlowID=@FlowID,ErrorTime=@ErrorTime,IP=@IP WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ErrorCode", list[p].ErrorCode);
				para[p].Add("@ErrorMSG", list[p].ErrorMSG);
				para[p].Add("@ErrorContent", list[p].ErrorContent);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@Accounts", list[p].Accounts);
				para[p].Add("@AccountMoney", list[p].AccountMoney);
				para[p].Add("@FlowID", list[p].FlowID);
				para[p].Add("@ErrorTime", list[p].ErrorTime);
				para[p].Add("@IP", list[p].IP);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Api_ErrorLog> list)
		{
			string sql="DELETE FROM [dbo].[Web_Api_ErrorLog] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Api_ErrorLog] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Api_ErrorLog] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Api_ErrorLog GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Api_ErrorLog] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Api_ErrorLog>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Api_ErrorLog> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Api_ErrorLog] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Api_ErrorLog>(sql).AsList<Web_Api_ErrorLog>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Api_ErrorLog] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Api_ErrorLog] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Api_ErrorLog] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Api_ErrorLog>(sql).AsList<Web_Api_ErrorLog>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Api_WhiteList
	{
		#region property
		public int ID { get; set; }
		public Nullable<int> PlatformID { get; set; }
		public string CustomerName { get; set; }
		public string WhitelistIp { get; set; }
		public string WhitelistDomain { get; set; }
		public Nullable<int> WhiteType { get; set; }
		public Nullable<int> CreatorID { get; set; }
		public Nullable<DateTime> CreateTime { get; set; }
		public string IP { get; set; }
		#endregion property
		
	}
	public static class Web_Api_WhiteListExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Api_WhiteList entity)
		{
			string sql="INSERT INTO [dbo].[Web_Api_WhiteList] (PlatformID,CustomerName,WhitelistIp,WhitelistDomain,WhiteType,CreatorID,CreateTime,IP)VALUES(@PlatformID,@CustomerName,@WhitelistIp,@WhitelistDomain,@WhiteType,@CreatorID,@CreateTime,@IP);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@CustomerName", entity.CustomerName);
				para.Add("@WhitelistIp", entity.WhitelistIp);
				para.Add("@WhitelistDomain", entity.WhitelistDomain);
				para.Add("@WhiteType", entity.WhiteType);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Api_WhiteList> list)
		{
			string sql="INSERT INTO [dbo].[Web_Api_WhiteList] (PlatformID,CustomerName,WhitelistIp,WhitelistDomain,WhiteType,CreatorID,CreateTime,IP)VALUES(@PlatformID,@CustomerName,@WhitelistIp,@WhitelistDomain,@WhiteType,@CreatorID,@CreateTime,@IP);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@CustomerName", list[p].CustomerName);
					para[p].Add("@WhitelistIp", list[p].WhitelistIp);
					para[p].Add("@WhitelistDomain", list[p].WhitelistDomain);
					para[p].Add("@WhiteType", list[p].WhiteType);
					para[p].Add("@CreatorID", list[p].CreatorID);
					para[p].Add("@CreateTime", list[p].CreateTime);
					para[p].Add("@IP", list[p].IP);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Api_WhiteList GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Api_WhiteList] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Api_WhiteList>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Api_WhiteList entity)
		{
			string sql="UPDATE [dbo].[Web_Api_WhiteList] SET PlatformID=@PlatformID,CustomerName=@CustomerName,WhitelistIp=@WhitelistIp,WhitelistDomain=@WhitelistDomain,WhiteType=@WhiteType,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@CustomerName", entity.CustomerName);
				para.Add("@WhitelistIp", entity.WhitelistIp);
				para.Add("@WhitelistDomain", entity.WhitelistDomain);
				para.Add("@WhiteType", entity.WhiteType);
				para.Add("@CreatorID", entity.CreatorID);
				para.Add("@CreateTime", entity.CreateTime);
				para.Add("@IP", entity.IP);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Api_WhiteList entity)
		{
			string sql="DELETE FROM [dbo].[Web_Api_WhiteList] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Api_WhiteList> list)
		{
			string sql="UPDATE [dbo].[Web_Api_WhiteList] SET PlatformID=@PlatformID,CustomerName=@CustomerName,WhitelistIp=@WhitelistIp,WhitelistDomain=@WhitelistDomain,WhiteType=@WhiteType,CreatorID=@CreatorID,CreateTime=@CreateTime,IP=@IP WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@CustomerName", list[p].CustomerName);
				para[p].Add("@WhitelistIp", list[p].WhitelistIp);
				para[p].Add("@WhitelistDomain", list[p].WhitelistDomain);
				para[p].Add("@WhiteType", list[p].WhiteType);
				para[p].Add("@CreatorID", list[p].CreatorID);
				para[p].Add("@CreateTime", list[p].CreateTime);
				para[p].Add("@IP", list[p].IP);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Api_WhiteList> list)
		{
			string sql="DELETE FROM [dbo].[Web_Api_WhiteList] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Api_WhiteList] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Api_WhiteList] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Api_WhiteList GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Api_WhiteList] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Api_WhiteList>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Api_WhiteList> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Api_WhiteList] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Api_WhiteList>(sql).AsList<Web_Api_WhiteList>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Api_WhiteList] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Api_WhiteList] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Api_WhiteList] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Api_WhiteList>(sql).AsList<Web_Api_WhiteList>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_NoticeMSG
	{
		#region property
		public int ID { get; set; }
		public string NoticeTitle { get; set; }
		public string NoticeContent { get; set; }
		public Nullable<DateTime> AddTime { get; set; }
		public Nullable<DateTime> ReadTime { get; set; }
		public Nullable<int> ISRead { get; set; }
		public Nullable<int> Types { get; set; }
		public Nullable<int> PlatformID { get; set; }
		public Nullable<int> States { get; set; }
		public Nullable<int> ReadUserID { get; set; }
		public string ReadUserName { get; set; }
		#endregion property
		
	}
	public static class Web_NoticeMSGExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_NoticeMSG entity)
		{
			string sql="INSERT INTO [dbo].[Web_NoticeMSG] (NoticeTitle,NoticeContent,AddTime,ReadTime,ISRead,Types,PlatformID,States,ReadUserID,ReadUserName)VALUES(@NoticeTitle,@NoticeContent,@AddTime,@ReadTime,@ISRead,@Types,@PlatformID,@States,@ReadUserID,@ReadUserName);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@NoticeTitle", entity.NoticeTitle);
				para.Add("@NoticeContent", entity.NoticeContent);
				para.Add("@AddTime", entity.AddTime);
				para.Add("@ReadTime", entity.ReadTime);
				para.Add("@ISRead", entity.ISRead);
				para.Add("@Types", entity.Types);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@States", entity.States);
				para.Add("@ReadUserID", entity.ReadUserID);
				para.Add("@ReadUserName", entity.ReadUserName);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_NoticeMSG> list)
		{
			string sql="INSERT INTO [dbo].[Web_NoticeMSG] (NoticeTitle,NoticeContent,AddTime,ReadTime,ISRead,Types,PlatformID,States,ReadUserID,ReadUserName)VALUES(@NoticeTitle,@NoticeContent,@AddTime,@ReadTime,@ISRead,@Types,@PlatformID,@States,@ReadUserID,@ReadUserName);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@NoticeTitle", list[p].NoticeTitle);
					para[p].Add("@NoticeContent", list[p].NoticeContent);
					para[p].Add("@AddTime", list[p].AddTime);
					para[p].Add("@ReadTime", list[p].ReadTime);
					para[p].Add("@ISRead", list[p].ISRead);
					para[p].Add("@Types", list[p].Types);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@States", list[p].States);
					para[p].Add("@ReadUserID", list[p].ReadUserID);
					para[p].Add("@ReadUserName", list[p].ReadUserName);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_NoticeMSG GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_NoticeMSG] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_NoticeMSG>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_NoticeMSG entity)
		{
			string sql="UPDATE [dbo].[Web_NoticeMSG] SET NoticeTitle=@NoticeTitle,NoticeContent=@NoticeContent,AddTime=@AddTime,ReadTime=@ReadTime,ISRead=@ISRead,Types=@Types,PlatformID=@PlatformID,States=@States,ReadUserID=@ReadUserID,ReadUserName=@ReadUserName WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@NoticeTitle", entity.NoticeTitle);
				para.Add("@NoticeContent", entity.NoticeContent);
				para.Add("@AddTime", entity.AddTime);
				para.Add("@ReadTime", entity.ReadTime);
				para.Add("@ISRead", entity.ISRead);
				para.Add("@Types", entity.Types);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@States", entity.States);
				para.Add("@ReadUserID", entity.ReadUserID);
				para.Add("@ReadUserName", entity.ReadUserName);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_NoticeMSG entity)
		{
			string sql="DELETE FROM [dbo].[Web_NoticeMSG] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_NoticeMSG> list)
		{
			string sql="UPDATE [dbo].[Web_NoticeMSG] SET NoticeTitle=@NoticeTitle,NoticeContent=@NoticeContent,AddTime=@AddTime,ReadTime=@ReadTime,ISRead=@ISRead,Types=@Types,PlatformID=@PlatformID,States=@States,ReadUserID=@ReadUserID,ReadUserName=@ReadUserName WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@NoticeTitle", list[p].NoticeTitle);
				para[p].Add("@NoticeContent", list[p].NoticeContent);
				para[p].Add("@AddTime", list[p].AddTime);
				para[p].Add("@ReadTime", list[p].ReadTime);
				para[p].Add("@ISRead", list[p].ISRead);
				para[p].Add("@Types", list[p].Types);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@States", list[p].States);
				para[p].Add("@ReadUserID", list[p].ReadUserID);
				para[p].Add("@ReadUserName", list[p].ReadUserName);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_NoticeMSG> list)
		{
			string sql="DELETE FROM [dbo].[Web_NoticeMSG] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_NoticeMSG] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_NoticeMSG] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_NoticeMSG GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_NoticeMSG] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_NoticeMSG>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_NoticeMSG> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_NoticeMSG] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_NoticeMSG>(sql).AsList<Web_NoticeMSG>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_NoticeMSG] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_NoticeMSG] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_NoticeMSG] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_NoticeMSG>(sql).AsList<Web_NoticeMSG>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Sys_Affiche
	{
		#region property
		public int ID { get; set; }
		public string AfficheTitle { get; set; }
		public string AfficheContent { get; set; }
		public Nullable<DateTime> StartTime { get; set; }
		public Nullable<DateTime> EndTime { get; set; }
		public Nullable<int> IntervalTime { get; set; }
		public Nullable<int> RepeatCount { get; set; }
		public Nullable<int> AfficheSort { get; set; }
		public Nullable<int> AfficheType { get; set; }
		public Nullable<int> State { get; set; }
		#endregion property
		
	}
	public static class Web_Sys_AfficheExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Sys_Affiche entity)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Affiche] (AfficheTitle,AfficheContent,StartTime,EndTime,IntervalTime,RepeatCount,AfficheSort,AfficheType,State)VALUES(@AfficheTitle,@AfficheContent,@StartTime,@EndTime,@IntervalTime,@RepeatCount,@AfficheSort,@AfficheType,@State);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@AfficheTitle", entity.AfficheTitle);
				para.Add("@AfficheContent", entity.AfficheContent);
				para.Add("@StartTime", entity.StartTime);
				para.Add("@EndTime", entity.EndTime);
				para.Add("@IntervalTime", entity.IntervalTime);
				para.Add("@RepeatCount", entity.RepeatCount);
				para.Add("@AfficheSort", entity.AfficheSort);
				para.Add("@AfficheType", entity.AfficheType);
				para.Add("@State", entity.State);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Sys_Affiche> list)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Affiche] (AfficheTitle,AfficheContent,StartTime,EndTime,IntervalTime,RepeatCount,AfficheSort,AfficheType,State)VALUES(@AfficheTitle,@AfficheContent,@StartTime,@EndTime,@IntervalTime,@RepeatCount,@AfficheSort,@AfficheType,@State);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@AfficheTitle", list[p].AfficheTitle);
					para[p].Add("@AfficheContent", list[p].AfficheContent);
					para[p].Add("@StartTime", list[p].StartTime);
					para[p].Add("@EndTime", list[p].EndTime);
					para[p].Add("@IntervalTime", list[p].IntervalTime);
					para[p].Add("@RepeatCount", list[p].RepeatCount);
					para[p].Add("@AfficheSort", list[p].AfficheSort);
					para[p].Add("@AfficheType", list[p].AfficheType);
					para[p].Add("@State", list[p].State);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Sys_Affiche GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Affiche] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Affiche>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Sys_Affiche entity)
		{
			string sql="UPDATE [dbo].[Web_Sys_Affiche] SET AfficheTitle=@AfficheTitle,AfficheContent=@AfficheContent,StartTime=@StartTime,EndTime=@EndTime,IntervalTime=@IntervalTime,RepeatCount=@RepeatCount,AfficheSort=@AfficheSort,AfficheType=@AfficheType,State=@State WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@AfficheTitle", entity.AfficheTitle);
				para.Add("@AfficheContent", entity.AfficheContent);
				para.Add("@StartTime", entity.StartTime);
				para.Add("@EndTime", entity.EndTime);
				para.Add("@IntervalTime", entity.IntervalTime);
				para.Add("@RepeatCount", entity.RepeatCount);
				para.Add("@AfficheSort", entity.AfficheSort);
				para.Add("@AfficheType", entity.AfficheType);
				para.Add("@State", entity.State);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Sys_Affiche entity)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Affiche] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Sys_Affiche> list)
		{
			string sql="UPDATE [dbo].[Web_Sys_Affiche] SET AfficheTitle=@AfficheTitle,AfficheContent=@AfficheContent,StartTime=@StartTime,EndTime=@EndTime,IntervalTime=@IntervalTime,RepeatCount=@RepeatCount,AfficheSort=@AfficheSort,AfficheType=@AfficheType,State=@State WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@AfficheTitle", list[p].AfficheTitle);
				para[p].Add("@AfficheContent", list[p].AfficheContent);
				para[p].Add("@StartTime", list[p].StartTime);
				para[p].Add("@EndTime", list[p].EndTime);
				para[p].Add("@IntervalTime", list[p].IntervalTime);
				para[p].Add("@RepeatCount", list[p].RepeatCount);
				para[p].Add("@AfficheSort", list[p].AfficheSort);
				para[p].Add("@AfficheType", list[p].AfficheType);
				para[p].Add("@State", list[p].State);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Sys_Affiche> list)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Affiche] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Affiche] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Affiche] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Sys_Affiche GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Affiche] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Affiche>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Sys_Affiche> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Affiche] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Sys_Affiche>(sql).AsList<Web_Sys_Affiche>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Sys_Affiche] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Sys_Affiche] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Sys_Affiche] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Sys_Affiche>(sql).AsList<Web_Sys_Affiche>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Sys_Billing
	{
		#region property
		public int ID { get; set; }
		public int PlatformIDs { get; set; }
		public string PlatformName { get; set; }
		public int BillYear { get; set; }
		public int BillMonth { get; set; }
		public int BillType { get; set; }
		public int SplitRatio { get; set; }
		public long BillTotal { get; set; }
		public string Description { get; set; }
		public Nullable<int> State { get; set; }
		#endregion property
		
	}
	public static class Web_Sys_BillingExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Sys_Billing entity)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Billing] (PlatformIDs,PlatformName,BillYear,BillMonth,BillType,SplitRatio,BillTotal,Description,State)VALUES(@PlatformIDs,@PlatformName,@BillYear,@BillMonth,@BillType,@SplitRatio,@BillTotal,@Description,@State);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@PlatformIDs", entity.PlatformIDs);
				para.Add("@PlatformName", entity.PlatformName);
				para.Add("@BillYear", entity.BillYear);
				para.Add("@BillMonth", entity.BillMonth);
				para.Add("@BillType", entity.BillType);
				para.Add("@SplitRatio", entity.SplitRatio);
				para.Add("@BillTotal", entity.BillTotal);
				para.Add("@Description", entity.Description);
				para.Add("@State", entity.State);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Sys_Billing> list)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Billing] (PlatformIDs,PlatformName,BillYear,BillMonth,BillType,SplitRatio,BillTotal,Description,State)VALUES(@PlatformIDs,@PlatformName,@BillYear,@BillMonth,@BillType,@SplitRatio,@BillTotal,@Description,@State);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@PlatformIDs", list[p].PlatformIDs);
					para[p].Add("@PlatformName", list[p].PlatformName);
					para[p].Add("@BillYear", list[p].BillYear);
					para[p].Add("@BillMonth", list[p].BillMonth);
					para[p].Add("@BillType", list[p].BillType);
					para[p].Add("@SplitRatio", list[p].SplitRatio);
					para[p].Add("@BillTotal", list[p].BillTotal);
					para[p].Add("@Description", list[p].Description);
					para[p].Add("@State", list[p].State);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Sys_Billing GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Billing] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Billing>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Sys_Billing entity)
		{
			string sql="UPDATE [dbo].[Web_Sys_Billing] SET PlatformIDs=@PlatformIDs,PlatformName=@PlatformName,BillYear=@BillYear,BillMonth=@BillMonth,BillType=@BillType,SplitRatio=@SplitRatio,BillTotal=@BillTotal,Description=@Description,State=@State WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@PlatformIDs", entity.PlatformIDs);
				para.Add("@PlatformName", entity.PlatformName);
				para.Add("@BillYear", entity.BillYear);
				para.Add("@BillMonth", entity.BillMonth);
				para.Add("@BillType", entity.BillType);
				para.Add("@SplitRatio", entity.SplitRatio);
				para.Add("@BillTotal", entity.BillTotal);
				para.Add("@Description", entity.Description);
				para.Add("@State", entity.State);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Sys_Billing entity)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Billing] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Sys_Billing> list)
		{
			string sql="UPDATE [dbo].[Web_Sys_Billing] SET PlatformIDs=@PlatformIDs,PlatformName=@PlatformName,BillYear=@BillYear,BillMonth=@BillMonth,BillType=@BillType,SplitRatio=@SplitRatio,BillTotal=@BillTotal,Description=@Description,State=@State WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@PlatformIDs", list[p].PlatformIDs);
				para[p].Add("@PlatformName", list[p].PlatformName);
				para[p].Add("@BillYear", list[p].BillYear);
				para[p].Add("@BillMonth", list[p].BillMonth);
				para[p].Add("@BillType", list[p].BillType);
				para[p].Add("@SplitRatio", list[p].SplitRatio);
				para[p].Add("@BillTotal", list[p].BillTotal);
				para[p].Add("@Description", list[p].Description);
				para[p].Add("@State", list[p].State);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Sys_Billing> list)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Billing] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Billing] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Billing] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Sys_Billing GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Billing] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Billing>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Sys_Billing> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Billing] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Sys_Billing>(sql).AsList<Web_Sys_Billing>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Sys_Billing] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Sys_Billing] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Sys_Billing] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Sys_Billing>(sql).AsList<Web_Sys_Billing>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Sys_MUser
	{
		#region property
		public int ID { get; set; }
		public string UserName { get; set; }
		public string UserPassword { get; set; }
		public string UserPhone { get; set; }
		public string UserEmail { get; set; }
		public string UserQQ { get; set; }
		public Nullable<int> RoleId { get; set; }
		public Nullable<int> Status { get; set; }
		public Nullable<DateTime> InsertTime { get; set; }
		public Nullable<DateTime> UpdateTime { get; set; }
		public Nullable<int> UserType { get; set; }
		public Nullable<int> PlatformID { get; set; }
		public Nullable<DateTime> PreLogintime { get; set; }
		public string PreLoginIP { get; set; }
		public Nullable<DateTime> LastLogintime { get; set; }
		public string LastLoginIP { get; set; }
		public Nullable<int> IsBand { get; set; }
		public string BandIP { get; set; }
		public Nullable<DateTime> LockTime { get; set; }
		public Nullable<DateTime> UnlockTime { get; set; }
		#endregion property
		
	}
	public static class Web_Sys_MUserExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Sys_MUser entity)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_MUser] (UserName,UserPassword,UserPhone,UserEmail,UserQQ,RoleId,Status,InsertTime,UpdateTime,UserType,PlatformID,PreLogintime,PreLoginIP,LastLogintime,LastLoginIP,IsBand,BandIP,LockTime,UnlockTime)VALUES(@UserName,@UserPassword,@UserPhone,@UserEmail,@UserQQ,@RoleId,@Status,@InsertTime,@UpdateTime,@UserType,@PlatformID,@PreLogintime,@PreLoginIP,@LastLogintime,@LastLoginIP,@IsBand,@BandIP,@LockTime,@UnlockTime);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@UserName", entity.UserName);
				para.Add("@UserPassword", entity.UserPassword);
				para.Add("@UserPhone", entity.UserPhone);
				para.Add("@UserEmail", entity.UserEmail);
				para.Add("@UserQQ", entity.UserQQ);
				para.Add("@RoleId", entity.RoleId);
				para.Add("@Status", entity.Status);
				para.Add("@InsertTime", entity.InsertTime);
				para.Add("@UpdateTime", entity.UpdateTime);
				para.Add("@UserType", entity.UserType);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@PreLogintime", entity.PreLogintime);
				para.Add("@PreLoginIP", entity.PreLoginIP);
				para.Add("@LastLogintime", entity.LastLogintime);
				para.Add("@LastLoginIP", entity.LastLoginIP);
				para.Add("@IsBand", entity.IsBand);
				para.Add("@BandIP", entity.BandIP);
				para.Add("@LockTime", entity.LockTime);
				para.Add("@UnlockTime", entity.UnlockTime);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Sys_MUser> list)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_MUser] (UserName,UserPassword,UserPhone,UserEmail,UserQQ,RoleId,Status,InsertTime,UpdateTime,UserType,PlatformID,PreLogintime,PreLoginIP,LastLogintime,LastLoginIP,IsBand,BandIP,LockTime,UnlockTime)VALUES(@UserName,@UserPassword,@UserPhone,@UserEmail,@UserQQ,@RoleId,@Status,@InsertTime,@UpdateTime,@UserType,@PlatformID,@PreLogintime,@PreLoginIP,@LastLogintime,@LastLoginIP,@IsBand,@BandIP,@LockTime,@UnlockTime);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@UserName", list[p].UserName);
					para[p].Add("@UserPassword", list[p].UserPassword);
					para[p].Add("@UserPhone", list[p].UserPhone);
					para[p].Add("@UserEmail", list[p].UserEmail);
					para[p].Add("@UserQQ", list[p].UserQQ);
					para[p].Add("@RoleId", list[p].RoleId);
					para[p].Add("@Status", list[p].Status);
					para[p].Add("@InsertTime", list[p].InsertTime);
					para[p].Add("@UpdateTime", list[p].UpdateTime);
					para[p].Add("@UserType", list[p].UserType);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@PreLogintime", list[p].PreLogintime);
					para[p].Add("@PreLoginIP", list[p].PreLoginIP);
					para[p].Add("@LastLogintime", list[p].LastLogintime);
					para[p].Add("@LastLoginIP", list[p].LastLoginIP);
					para[p].Add("@IsBand", list[p].IsBand);
					para[p].Add("@BandIP", list[p].BandIP);
					para[p].Add("@LockTime", list[p].LockTime);
					para[p].Add("@UnlockTime", list[p].UnlockTime);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Sys_MUser GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_MUser] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_MUser>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Sys_MUser entity)
		{
			string sql="UPDATE [dbo].[Web_Sys_MUser] SET UserName=@UserName,UserPassword=@UserPassword,UserPhone=@UserPhone,UserEmail=@UserEmail,UserQQ=@UserQQ,RoleId=@RoleId,Status=@Status,InsertTime=@InsertTime,UpdateTime=@UpdateTime,UserType=@UserType,PlatformID=@PlatformID,PreLogintime=@PreLogintime,PreLoginIP=@PreLoginIP,LastLogintime=@LastLogintime,LastLoginIP=@LastLoginIP,IsBand=@IsBand,BandIP=@BandIP,LockTime=@LockTime,UnlockTime=@UnlockTime WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@UserName", entity.UserName);
				para.Add("@UserPassword", entity.UserPassword);
				para.Add("@UserPhone", entity.UserPhone);
				para.Add("@UserEmail", entity.UserEmail);
				para.Add("@UserQQ", entity.UserQQ);
				para.Add("@RoleId", entity.RoleId);
				para.Add("@Status", entity.Status);
				para.Add("@InsertTime", entity.InsertTime);
				para.Add("@UpdateTime", entity.UpdateTime);
				para.Add("@UserType", entity.UserType);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@PreLogintime", entity.PreLogintime);
				para.Add("@PreLoginIP", entity.PreLoginIP);
				para.Add("@LastLogintime", entity.LastLogintime);
				para.Add("@LastLoginIP", entity.LastLoginIP);
				para.Add("@IsBand", entity.IsBand);
				para.Add("@BandIP", entity.BandIP);
				para.Add("@LockTime", entity.LockTime);
				para.Add("@UnlockTime", entity.UnlockTime);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Sys_MUser entity)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_MUser] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Sys_MUser> list)
		{
			string sql="UPDATE [dbo].[Web_Sys_MUser] SET UserName=@UserName,UserPassword=@UserPassword,UserPhone=@UserPhone,UserEmail=@UserEmail,UserQQ=@UserQQ,RoleId=@RoleId,Status=@Status,InsertTime=@InsertTime,UpdateTime=@UpdateTime,UserType=@UserType,PlatformID=@PlatformID,PreLogintime=@PreLogintime,PreLoginIP=@PreLoginIP,LastLogintime=@LastLogintime,LastLoginIP=@LastLoginIP,IsBand=@IsBand,BandIP=@BandIP,LockTime=@LockTime,UnlockTime=@UnlockTime WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@UserName", list[p].UserName);
				para[p].Add("@UserPassword", list[p].UserPassword);
				para[p].Add("@UserPhone", list[p].UserPhone);
				para[p].Add("@UserEmail", list[p].UserEmail);
				para[p].Add("@UserQQ", list[p].UserQQ);
				para[p].Add("@RoleId", list[p].RoleId);
				para[p].Add("@Status", list[p].Status);
				para[p].Add("@InsertTime", list[p].InsertTime);
				para[p].Add("@UpdateTime", list[p].UpdateTime);
				para[p].Add("@UserType", list[p].UserType);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@PreLogintime", list[p].PreLogintime);
				para[p].Add("@PreLoginIP", list[p].PreLoginIP);
				para[p].Add("@LastLogintime", list[p].LastLogintime);
				para[p].Add("@LastLoginIP", list[p].LastLoginIP);
				para[p].Add("@IsBand", list[p].IsBand);
				para[p].Add("@BandIP", list[p].BandIP);
				para[p].Add("@LockTime", list[p].LockTime);
				para[p].Add("@UnlockTime", list[p].UnlockTime);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Sys_MUser> list)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_MUser] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_MUser] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_MUser] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Sys_MUser GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_MUser] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_MUser>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Sys_MUser> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_MUser] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Sys_MUser>(sql).AsList<Web_Sys_MUser>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Sys_MUser] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Sys_MUser] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Sys_MUser] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Sys_MUser>(sql).AsList<Web_Sys_MUser>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Sys_OperateLog
	{
		#region property
		public int ID { get; set; }
		public string AdminId { get; set; }
		public Nullable<int> OperateType { get; set; }
		public string OperateContent { get; set; }
		public string OperateDescribe { get; set; }
		public string OperateId { get; set; }
		public string OperateTable { get; set; }
		public Nullable<DateTime> OperateTime { get; set; }
		public Nullable<int> PlatformID { get; set; }
		public Nullable<int> States { get; set; }
		public string Detail { get; set; }
		#endregion property
		
	}
	public static class Web_Sys_OperateLogExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Sys_OperateLog entity)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_OperateLog] (AdminId,OperateType,OperateContent,OperateDescribe,OperateId,OperateTable,OperateTime,PlatformID,States,Detail)VALUES(@AdminId,@OperateType,@OperateContent,@OperateDescribe,@OperateId,@OperateTable,@OperateTime,@PlatformID,@States,@Detail);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@AdminId", entity.AdminId);
				para.Add("@OperateType", entity.OperateType);
				para.Add("@OperateContent", entity.OperateContent);
				para.Add("@OperateDescribe", entity.OperateDescribe);
				para.Add("@OperateId", entity.OperateId);
				para.Add("@OperateTable", entity.OperateTable);
				para.Add("@OperateTime", entity.OperateTime);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@States", entity.States);
				para.Add("@Detail", entity.Detail);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Sys_OperateLog> list)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_OperateLog] (AdminId,OperateType,OperateContent,OperateDescribe,OperateId,OperateTable,OperateTime,PlatformID,States,Detail)VALUES(@AdminId,@OperateType,@OperateContent,@OperateDescribe,@OperateId,@OperateTable,@OperateTime,@PlatformID,@States,@Detail);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@AdminId", list[p].AdminId);
					para[p].Add("@OperateType", list[p].OperateType);
					para[p].Add("@OperateContent", list[p].OperateContent);
					para[p].Add("@OperateDescribe", list[p].OperateDescribe);
					para[p].Add("@OperateId", list[p].OperateId);
					para[p].Add("@OperateTable", list[p].OperateTable);
					para[p].Add("@OperateTime", list[p].OperateTime);
					para[p].Add("@PlatformID", list[p].PlatformID);
					para[p].Add("@States", list[p].States);
					para[p].Add("@Detail", list[p].Detail);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Sys_OperateLog GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_OperateLog] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_OperateLog>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Sys_OperateLog entity)
		{
			string sql="UPDATE [dbo].[Web_Sys_OperateLog] SET AdminId=@AdminId,OperateType=@OperateType,OperateContent=@OperateContent,OperateDescribe=@OperateDescribe,OperateId=@OperateId,OperateTable=@OperateTable,OperateTime=@OperateTime,PlatformID=@PlatformID,States=@States,Detail=@Detail WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@AdminId", entity.AdminId);
				para.Add("@OperateType", entity.OperateType);
				para.Add("@OperateContent", entity.OperateContent);
				para.Add("@OperateDescribe", entity.OperateDescribe);
				para.Add("@OperateId", entity.OperateId);
				para.Add("@OperateTable", entity.OperateTable);
				para.Add("@OperateTime", entity.OperateTime);
				para.Add("@PlatformID", entity.PlatformID);
				para.Add("@States", entity.States);
				para.Add("@Detail", entity.Detail);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Sys_OperateLog entity)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_OperateLog] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Sys_OperateLog> list)
		{
			string sql="UPDATE [dbo].[Web_Sys_OperateLog] SET AdminId=@AdminId,OperateType=@OperateType,OperateContent=@OperateContent,OperateDescribe=@OperateDescribe,OperateId=@OperateId,OperateTable=@OperateTable,OperateTime=@OperateTime,PlatformID=@PlatformID,States=@States,Detail=@Detail WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@AdminId", list[p].AdminId);
				para[p].Add("@OperateType", list[p].OperateType);
				para[p].Add("@OperateContent", list[p].OperateContent);
				para[p].Add("@OperateDescribe", list[p].OperateDescribe);
				para[p].Add("@OperateId", list[p].OperateId);
				para[p].Add("@OperateTable", list[p].OperateTable);
				para[p].Add("@OperateTime", list[p].OperateTime);
				para[p].Add("@PlatformID", list[p].PlatformID);
				para[p].Add("@States", list[p].States);
				para[p].Add("@Detail", list[p].Detail);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Sys_OperateLog> list)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_OperateLog] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_OperateLog] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_OperateLog] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Sys_OperateLog GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_OperateLog] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_OperateLog>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Sys_OperateLog> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_OperateLog] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Sys_OperateLog>(sql).AsList<Web_Sys_OperateLog>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Sys_OperateLog] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Sys_OperateLog] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Sys_OperateLog] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Sys_OperateLog>(sql).AsList<Web_Sys_OperateLog>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Sys_Organiz
	{
		#region property
		public int ID { get; set; }
		public string OrganizCode { get; set; }
		public string OrganizName { get; set; }
		public string Remark { get; set; }
		public Nullable<int> SortNo { get; set; }
		public Nullable<int> Statue { get; set; }
		public Nullable<int> ParentId { get; set; }
		public Nullable<DateTime> InsertTime { get; set; }
		public Nullable<DateTime> UpdateTime { get; set; }
		public Nullable<DateTime> SignDateTime { get; set; }
		public Nullable<DateTime> ContractPeriodTime { get; set; }
		public Nullable<int> SplitRatio { get; set; }
		public string DesKey { get; set; }
		public string MD5Key { get; set; }
		public string RechargeCenter { get; set; }
		public Nullable<long> MonthlyTurnover { get; set; }
		public Nullable<long> ServiceCharges { get; set; }
		#endregion property
		
	}
	public static class Web_Sys_OrganizExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Sys_Organiz entity)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Organiz] (OrganizCode,OrganizName,Remark,SortNo,Statue,ParentId,InsertTime,UpdateTime,SignDateTime,ContractPeriodTime,SplitRatio,DesKey,MD5Key,RechargeCenter,MonthlyTurnover,ServiceCharges)VALUES(@OrganizCode,@OrganizName,@Remark,@SortNo,@Statue,@ParentId,@InsertTime,@UpdateTime,@SignDateTime,@ContractPeriodTime,@SplitRatio,@DesKey,@MD5Key,@RechargeCenter,@MonthlyTurnover,@ServiceCharges);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@OrganizCode", entity.OrganizCode);
				para.Add("@OrganizName", entity.OrganizName);
				para.Add("@Remark", entity.Remark);
				para.Add("@SortNo", entity.SortNo);
				para.Add("@Statue", entity.Statue);
				para.Add("@ParentId", entity.ParentId);
				para.Add("@InsertTime", entity.InsertTime);
				para.Add("@UpdateTime", entity.UpdateTime);
				para.Add("@SignDateTime", entity.SignDateTime);
				para.Add("@ContractPeriodTime", entity.ContractPeriodTime);
				para.Add("@SplitRatio", entity.SplitRatio);
				para.Add("@DesKey", entity.DesKey);
				para.Add("@MD5Key", entity.MD5Key);
				para.Add("@RechargeCenter", entity.RechargeCenter);
				para.Add("@MonthlyTurnover", entity.MonthlyTurnover);
				para.Add("@ServiceCharges", entity.ServiceCharges);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Sys_Organiz> list)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Organiz] (OrganizCode,OrganizName,Remark,SortNo,Statue,ParentId,InsertTime,UpdateTime,SignDateTime,ContractPeriodTime,SplitRatio,DesKey,MD5Key,RechargeCenter,MonthlyTurnover,ServiceCharges)VALUES(@OrganizCode,@OrganizName,@Remark,@SortNo,@Statue,@ParentId,@InsertTime,@UpdateTime,@SignDateTime,@ContractPeriodTime,@SplitRatio,@DesKey,@MD5Key,@RechargeCenter,@MonthlyTurnover,@ServiceCharges);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@OrganizCode", list[p].OrganizCode);
					para[p].Add("@OrganizName", list[p].OrganizName);
					para[p].Add("@Remark", list[p].Remark);
					para[p].Add("@SortNo", list[p].SortNo);
					para[p].Add("@Statue", list[p].Statue);
					para[p].Add("@ParentId", list[p].ParentId);
					para[p].Add("@InsertTime", list[p].InsertTime);
					para[p].Add("@UpdateTime", list[p].UpdateTime);
					para[p].Add("@SignDateTime", list[p].SignDateTime);
					para[p].Add("@ContractPeriodTime", list[p].ContractPeriodTime);
					para[p].Add("@SplitRatio", list[p].SplitRatio);
					para[p].Add("@DesKey", list[p].DesKey);
					para[p].Add("@MD5Key", list[p].MD5Key);
					para[p].Add("@RechargeCenter", list[p].RechargeCenter);
					para[p].Add("@MonthlyTurnover", list[p].MonthlyTurnover);
					para[p].Add("@ServiceCharges", list[p].ServiceCharges);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Sys_Organiz GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Organiz] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Organiz>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Sys_Organiz entity)
		{
			string sql="UPDATE [dbo].[Web_Sys_Organiz] SET OrganizCode=@OrganizCode,OrganizName=@OrganizName,Remark=@Remark,SortNo=@SortNo,Statue=@Statue,ParentId=@ParentId,InsertTime=@InsertTime,UpdateTime=@UpdateTime,SignDateTime=@SignDateTime,ContractPeriodTime=@ContractPeriodTime,SplitRatio=@SplitRatio,DesKey=@DesKey,MD5Key=@MD5Key,RechargeCenter=@RechargeCenter,MonthlyTurnover=@MonthlyTurnover,ServiceCharges=@ServiceCharges WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@OrganizCode", entity.OrganizCode);
				para.Add("@OrganizName", entity.OrganizName);
				para.Add("@Remark", entity.Remark);
				para.Add("@SortNo", entity.SortNo);
				para.Add("@Statue", entity.Statue);
				para.Add("@ParentId", entity.ParentId);
				para.Add("@InsertTime", entity.InsertTime);
				para.Add("@UpdateTime", entity.UpdateTime);
				para.Add("@SignDateTime", entity.SignDateTime);
				para.Add("@ContractPeriodTime", entity.ContractPeriodTime);
				para.Add("@SplitRatio", entity.SplitRatio);
				para.Add("@DesKey", entity.DesKey);
				para.Add("@MD5Key", entity.MD5Key);
				para.Add("@RechargeCenter", entity.RechargeCenter);
				para.Add("@MonthlyTurnover", entity.MonthlyTurnover);
				para.Add("@ServiceCharges", entity.ServiceCharges);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Sys_Organiz entity)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Organiz] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Sys_Organiz> list)
		{
			string sql="UPDATE [dbo].[Web_Sys_Organiz] SET OrganizCode=@OrganizCode,OrganizName=@OrganizName,Remark=@Remark,SortNo=@SortNo,Statue=@Statue,ParentId=@ParentId,InsertTime=@InsertTime,UpdateTime=@UpdateTime,SignDateTime=@SignDateTime,ContractPeriodTime=@ContractPeriodTime,SplitRatio=@SplitRatio,DesKey=@DesKey,MD5Key=@MD5Key,RechargeCenter=@RechargeCenter,MonthlyTurnover=@MonthlyTurnover,ServiceCharges=@ServiceCharges WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@OrganizCode", list[p].OrganizCode);
				para[p].Add("@OrganizName", list[p].OrganizName);
				para[p].Add("@Remark", list[p].Remark);
				para[p].Add("@SortNo", list[p].SortNo);
				para[p].Add("@Statue", list[p].Statue);
				para[p].Add("@ParentId", list[p].ParentId);
				para[p].Add("@InsertTime", list[p].InsertTime);
				para[p].Add("@UpdateTime", list[p].UpdateTime);
				para[p].Add("@SignDateTime", list[p].SignDateTime);
				para[p].Add("@ContractPeriodTime", list[p].ContractPeriodTime);
				para[p].Add("@SplitRatio", list[p].SplitRatio);
				para[p].Add("@DesKey", list[p].DesKey);
				para[p].Add("@MD5Key", list[p].MD5Key);
				para[p].Add("@RechargeCenter", list[p].RechargeCenter);
				para[p].Add("@MonthlyTurnover", list[p].MonthlyTurnover);
				para[p].Add("@ServiceCharges", list[p].ServiceCharges);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Sys_Organiz> list)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Organiz] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Organiz] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Organiz] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Sys_Organiz GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Organiz] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Organiz>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Sys_Organiz> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Organiz] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Sys_Organiz>(sql).AsList<Web_Sys_Organiz>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Sys_Organiz] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Sys_Organiz] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Sys_Organiz] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Sys_Organiz>(sql).AsList<Web_Sys_Organiz>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Sys_Rite
	{
		#region property
		public int ID { get; set; }
		public string RiteType { get; set; }
		public string RiteCode { get; set; }
		public string RiteName { get; set; }
		public string Remark { get; set; }
		public string Url { get; set; }
		public string Param { get; set; }
		public Nullable<int> SortNo { get; set; }
		#endregion property
		
	}
	public static class Web_Sys_RiteExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Sys_Rite entity)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Rite] (RiteType,RiteCode,RiteName,Remark,Url,Param,SortNo)VALUES(@RiteType,@RiteCode,@RiteName,@Remark,@Url,@Param,@SortNo);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@RiteType", entity.RiteType);
				para.Add("@RiteCode", entity.RiteCode);
				para.Add("@RiteName", entity.RiteName);
				para.Add("@Remark", entity.Remark);
				para.Add("@Url", entity.Url);
				para.Add("@Param", entity.Param);
				para.Add("@SortNo", entity.SortNo);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Sys_Rite> list)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Rite] (RiteType,RiteCode,RiteName,Remark,Url,Param,SortNo)VALUES(@RiteType,@RiteCode,@RiteName,@Remark,@Url,@Param,@SortNo);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@RiteType", list[p].RiteType);
					para[p].Add("@RiteCode", list[p].RiteCode);
					para[p].Add("@RiteName", list[p].RiteName);
					para[p].Add("@Remark", list[p].Remark);
					para[p].Add("@Url", list[p].Url);
					para[p].Add("@Param", list[p].Param);
					para[p].Add("@SortNo", list[p].SortNo);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Sys_Rite GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Rite] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Rite>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Sys_Rite entity)
		{
			string sql="UPDATE [dbo].[Web_Sys_Rite] SET RiteType=@RiteType,RiteCode=@RiteCode,RiteName=@RiteName,Remark=@Remark,Url=@Url,Param=@Param,SortNo=@SortNo WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@RiteType", entity.RiteType);
				para.Add("@RiteCode", entity.RiteCode);
				para.Add("@RiteName", entity.RiteName);
				para.Add("@Remark", entity.Remark);
				para.Add("@Url", entity.Url);
				para.Add("@Param", entity.Param);
				para.Add("@SortNo", entity.SortNo);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Sys_Rite entity)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Rite] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Sys_Rite> list)
		{
			string sql="UPDATE [dbo].[Web_Sys_Rite] SET RiteType=@RiteType,RiteCode=@RiteCode,RiteName=@RiteName,Remark=@Remark,Url=@Url,Param=@Param,SortNo=@SortNo WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@RiteType", list[p].RiteType);
				para[p].Add("@RiteCode", list[p].RiteCode);
				para[p].Add("@RiteName", list[p].RiteName);
				para[p].Add("@Remark", list[p].Remark);
				para[p].Add("@Url", list[p].Url);
				para[p].Add("@Param", list[p].Param);
				para[p].Add("@SortNo", list[p].SortNo);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Sys_Rite> list)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Rite] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Rite] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Rite] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Sys_Rite GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Rite] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Rite>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Sys_Rite> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Rite] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Sys_Rite>(sql).AsList<Web_Sys_Rite>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Sys_Rite] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Sys_Rite] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Sys_Rite] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Sys_Rite>(sql).AsList<Web_Sys_Rite>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Sys_Role
	{
		#region property
		public int ID { get; set; }
		public string RoleCode { get; set; }
		public string RoleName { get; set; }
		public string Remark { get; set; }
		#endregion property
		
	}
	public static class Web_Sys_RoleExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Sys_Role entity)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Role] (RoleCode,RoleName,Remark)VALUES(@RoleCode,@RoleName,@Remark);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@RoleCode", entity.RoleCode);
				para.Add("@RoleName", entity.RoleName);
				para.Add("@Remark", entity.Remark);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Sys_Role> list)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Role] (RoleCode,RoleName,Remark)VALUES(@RoleCode,@RoleName,@Remark);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@RoleCode", list[p].RoleCode);
					para[p].Add("@RoleName", list[p].RoleName);
					para[p].Add("@Remark", list[p].Remark);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Sys_Role GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Role] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Role>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Sys_Role entity)
		{
			string sql="UPDATE [dbo].[Web_Sys_Role] SET RoleCode=@RoleCode,RoleName=@RoleName,Remark=@Remark WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@RoleCode", entity.RoleCode);
				para.Add("@RoleName", entity.RoleName);
				para.Add("@Remark", entity.Remark);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Sys_Role entity)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Role] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Sys_Role> list)
		{
			string sql="UPDATE [dbo].[Web_Sys_Role] SET RoleCode=@RoleCode,RoleName=@RoleName,Remark=@Remark WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@RoleCode", list[p].RoleCode);
				para[p].Add("@RoleName", list[p].RoleName);
				para[p].Add("@Remark", list[p].Remark);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Sys_Role> list)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Role] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Role] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Role] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Sys_Role GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Role] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Role>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Sys_Role> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Role] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Sys_Role>(sql).AsList<Web_Sys_Role>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Sys_Role] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Sys_Role] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Sys_Role] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Sys_Role>(sql).AsList<Web_Sys_Role>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
	public class Web_Sys_Role_Rite
	{
		#region property
		public int ID { get; set; }
		public Nullable<int> RoleId { get; set; }
		public Nullable<int> RiteId { get; set; }
		public Nullable<int> IsSel { get; set; }
		public Nullable<int> IsAdd { get; set; }
		public Nullable<int> IsEdit { get; set; }
		public Nullable<int> IsDel { get; set; }
		public Nullable<int> IsSet { get; set; }
		#endregion property
		
	}
	public static class Web_Sys_Role_RiteExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["THLotteryDB"].ToString();
		
		public static int Insert(this Web_Sys_Role_Rite entity)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Role_Rite] (RoleId,RiteId,IsSel,IsAdd,IsEdit,IsDel,IsSet)VALUES(@RoleId,@RiteId,@IsSel,@IsAdd,@IsEdit,@IsDel,@IsSet);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@RoleId", entity.RoleId);
				para.Add("@RiteId", entity.RiteId);
				para.Add("@IsSel", entity.IsSel);
				para.Add("@IsAdd", entity.IsAdd);
				para.Add("@IsEdit", entity.IsEdit);
				para.Add("@IsDel", entity.IsDel);
				para.Add("@IsSet", entity.IsSet);
							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Web_Sys_Role_Rite> list)
		{
			string sql="INSERT INTO [dbo].[Web_Sys_Role_Rite] (RoleId,RiteId,IsSel,IsAdd,IsEdit,IsDel,IsSet)VALUES(@RoleId,@RiteId,@IsSel,@IsAdd,@IsEdit,@IsDel,@IsSet);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@RoleId", list[p].RoleId);
					para[p].Add("@RiteId", list[p].RiteId);
					para[p].Add("@IsSel", list[p].IsSel);
					para[p].Add("@IsAdd", list[p].IsAdd);
					para[p].Add("@IsEdit", list[p].IsEdit);
					para[p].Add("@IsDel", list[p].IsDel);
					para[p].Add("@IsSet", list[p].IsSet);
			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Web_Sys_Role_Rite GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Role_Rite] WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Role_Rite>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Web_Sys_Role_Rite entity)
		{
			string sql="UPDATE [dbo].[Web_Sys_Role_Rite] SET RoleId=@RoleId,RiteId=@RiteId,IsSel=@IsSel,IsAdd=@IsAdd,IsEdit=@IsEdit,IsDel=@IsDel,IsSet=@IsSet WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@RoleId", entity.RoleId);
				para.Add("@RiteId", entity.RiteId);
				para.Add("@IsSel", entity.IsSel);
				para.Add("@IsAdd", entity.IsAdd);
				para.Add("@IsEdit", entity.IsEdit);
				para.Add("@IsDel", entity.IsDel);
				para.Add("@IsSet", entity.IsSet);
		
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Web_Sys_Role_Rite entity)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Role_Rite] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@ID", entity.ID);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Web_Sys_Role_Rite> list)
		{
			string sql="UPDATE [dbo].[Web_Sys_Role_Rite] SET RoleId=@RoleId,RiteId=@RiteId,IsSel=@IsSel,IsAdd=@IsAdd,IsEdit=@IsEdit,IsDel=@IsDel,IsSet=@IsSet WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@RoleId", list[p].RoleId);
				para[p].Add("@RiteId", list[p].RiteId);
				para[p].Add("@IsSel", list[p].IsSel);
				para[p].Add("@IsAdd", list[p].IsAdd);
				para[p].Add("@IsEdit", list[p].IsEdit);
				para[p].Add("@IsDel", list[p].IsDel);
				para[p].Add("@IsSet", list[p].IsSet);
			
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Web_Sys_Role_Rite> list)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Role_Rite] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", list[p].ID);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Role_Rite] WHERE ID=@ID;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@ID", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM [dbo].[Web_Sys_Role_Rite] WHERE ID=@ID;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Web_Sys_Role_Rite GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Role_Rite] WHERE ID=@ID;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@ID", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Web_Sys_Role_Rite>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Web_Sys_Role_Rite> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM [dbo].[Web_Sys_Role_Rite] WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<Web_Sys_Role_Rite>(sql).AsList<Web_Sys_Role_Rite>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="ID DESC")
		{
			string sql=string.Format("SELECT TOP {0} * FROM [dbo].[Web_Sys_Role_Rite] WHERE {1} AND ID NOT IN (SELECT TOP {2} ID FROM [dbo].[Web_Sys_Role_Rite] WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
			string countSql=string.Format("SELECT COUNT(0) FROM [dbo].[Web_Sys_Role_Rite] WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Web_Sys_Role_Rite>(sql).AsList<Web_Sys_Role_Rite>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
}



