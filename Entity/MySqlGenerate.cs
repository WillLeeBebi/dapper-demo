

/// <summary>
/// Generated by T4 Template.DO NOT EDIT!
/// </summmary>
namespace Entity.dapper_test 
{
	using System;
	using System.Configuration;
	using System.Collections.Generic;
	using System.Data;
	using MySql.Data.MySqlClient;
	using Dapper;
	
	public class Pager
	{
		public int PageIndex { get; set; }
		public int PageSize { get; set; }
		public int Total { get; set; }
		public int PageCount { get { return (int)Math.Ceiling((double)Total/(double)PageSize); } }
		public object Data { get; set; }
	}
	public class Test
	{
		#region property
		public int id { get; set; }
		public string name { get; set; }
		public DateTime Time { get; set; }
		#endregion property
		
	}
	public static class TestExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["dapper-test"].ToString();
		
		public static int Insert(this Test entity)
		{
			string sql="INSERT INTO `dapper-test`.`Test` (name,Time)VALUES(@name,@Time);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", entity.name);
				para.Add("@Time", entity.Time);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<Test> list)
		{
			string sql="INSERT INTO `dapper-test`.`Test` (name,Time)VALUES(@name,@Time);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@name", list[p].name);
					para[p].Add("@Time", list[p].Time);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static Test GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `dapper-test`.`Test` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Test>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this Test entity)
		{
			string sql="UPDATE `dapper-test`.`Test` SET name=@name,Time=@Time WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", entity.name);
				para.Add("@Time", entity.Time);
		
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this Test entity)
		{
			string sql="DELETE FROM `dapper-test`.`Test` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<Test> list)
		{
			string sql="UPDATE `dapper-test`.`Test` SET name=@name,Time=@Time WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@name", list[p].name);
				para[p].Add("@Time", list[p].Time);
			
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<Test> list)
		{
			string sql="DELETE FROM `dapper-test`.`Test` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM `dapper-test`.`Test` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", primaryKeyArray[p]);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM `dapper-test`.`Test` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static Test GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM `dapper-test`.`Test` WHERE id=@id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<Test>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<Test> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM `dapper-test`.`Test` WHERE {0};", where);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Query<Test>(sql).AsList<Test>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="id DESC")
		{
			string sql=string.Format("SELECT * FROM `dapper-test`.`Test` WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
			string countSql=string.Format("SELECT COUNT(0) FROM `dapper-test`.`Test` WHERE {0};", where);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<Test>(sql).AsList<Test>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
	    }
	public class all_test
	{
		#region property
		public int id { get; set; }
		public int id { get; set; }
		public string name { get; set; }
		public string name { get; set; }
		public DateTime Time { get; set; }
		public DateTime Time { get; set; }
		#endregion property
		
	}
	public static class all_testExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["dapper-test"].ToString();
		
		public static int Insert(this all_test entity)
		{
			string sql="INSERT INTO `dapper-test`.`all_test` (id,id,name,name,Time,Time)VALUES(@id,@id,@name,@name,@Time,@Time);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@id", entity.id);
				para.Add("@id", entity.id);
				para.Add("@name", entity.name);
				para.Add("@name", entity.name);
				para.Add("@Time", entity.Time);
				para.Add("@Time", entity.Time);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<all_test> list)
		{
			string sql="INSERT INTO `dapper-test`.`all_test` (id,id,name,name,Time,Time)VALUES(@id,@id,@name,@name,@Time,@Time);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@id", list[p].id);
					para[p].Add("@id", list[p].id);
					para[p].Add("@name", list[p].name);
					para[p].Add("@name", list[p].name);
					para[p].Add("@Time", list[p].Time);
					para[p].Add("@Time", list[p].Time);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static all_test GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `dapper-test`.`all_test` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<all_test>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

    }
	public class datatype
	{
		#region property
		public bool bit { get; set; }
		public sbyte tinyint { get; set; }
		public short smallint { get; set; }
		public int mediumint { get; set; }
		public int @int { get; set; }
		public int integer { get; set; }
		public long bigint { get; set; }
		public double real { get; set; }
		public double @double { get; set; }
		public float @float { get; set; }
		public decimal @decimal { get; set; }
		public decimal numeric { get; set; }
		public string @char { get; set; }
		public string varchar { get; set; }
		public byte[] binary { get; set; }
		public byte[] varbinary { get; set; }
		public DateTime date { get; set; }
		public TimeSpan time { get; set; }
		public DateTime datetime { get; set; }
		public DateTime timestamp { get; set; }
		public short year { get; set; }
		public byte[] tinyblob { get; set; }
		public byte[] blob { get; set; }
		public byte[] mediumblob { get; set; }
		public byte[] longblob { get; set; }
		public string tinytext { get; set; }
		public string text { get; set; }
		public string mediumtext { get; set; }
		#endregion property
		
	}
	public static class datatypeExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["dapper-test"].ToString();
		
		public static int Insert(this datatype entity)
		{
			string sql="INSERT INTO `dapper-test`.`datatype` (bit,smallint,mediumint,int,integer,bigint,real,double,float,decimal,numeric,char,varchar,binary,varbinary,date,time,datetime,timestamp,year,tinyblob,blob,mediumblob,longblob,tinytext,text,mediumtext)VALUES(@bit,@smallint,@mediumint,@int,@integer,@bigint,@real,@double,@float,@decimal,@numeric,@char,@varchar,@binary,@varbinary,@date,@time,@datetime,@timestamp,@year,@tinyblob,@blob,@mediumblob,@longblob,@tinytext,@text,@mediumtext);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@bit", entity.bit);
				para.Add("@smallint", entity.smallint);
				para.Add("@mediumint", entity.mediumint);
				para.Add("@int", entity.@int);
				para.Add("@integer", entity.integer);
				para.Add("@bigint", entity.bigint);
				para.Add("@real", entity.real);
				para.Add("@double", entity.@double);
				para.Add("@float", entity.@float);
				para.Add("@decimal", entity.@decimal);
				para.Add("@numeric", entity.numeric);
				para.Add("@char", entity.@char);
				para.Add("@varchar", entity.varchar);
				para.Add("@binary", entity.binary);
				para.Add("@varbinary", entity.varbinary);
				para.Add("@date", entity.date);
				para.Add("@time", entity.time);
				para.Add("@datetime", entity.datetime);
				para.Add("@timestamp", entity.timestamp);
				para.Add("@year", entity.year);
				para.Add("@tinyblob", entity.tinyblob);
				para.Add("@blob", entity.blob);
				para.Add("@mediumblob", entity.mediumblob);
				para.Add("@longblob", entity.longblob);
				para.Add("@tinytext", entity.tinytext);
				para.Add("@text", entity.text);
				para.Add("@mediumtext", entity.mediumtext);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<datatype> list)
		{
			string sql="INSERT INTO `dapper-test`.`datatype` (bit,smallint,mediumint,int,integer,bigint,real,double,float,decimal,numeric,char,varchar,binary,varbinary,date,time,datetime,timestamp,year,tinyblob,blob,mediumblob,longblob,tinytext,text,mediumtext)VALUES(@bit,@smallint,@mediumint,@int,@integer,@bigint,@real,@double,@float,@decimal,@numeric,@char,@varchar,@binary,@varbinary,@date,@time,@datetime,@timestamp,@year,@tinyblob,@blob,@mediumblob,@longblob,@tinytext,@text,@mediumtext);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@bit", list[p].bit);
					para[p].Add("@smallint", list[p].smallint);
					para[p].Add("@mediumint", list[p].mediumint);
					para[p].Add("@int", list[p].@int);
					para[p].Add("@integer", list[p].integer);
					para[p].Add("@bigint", list[p].bigint);
					para[p].Add("@real", list[p].real);
					para[p].Add("@double", list[p].@double);
					para[p].Add("@float", list[p].@float);
					para[p].Add("@decimal", list[p].@decimal);
					para[p].Add("@numeric", list[p].numeric);
					para[p].Add("@char", list[p].@char);
					para[p].Add("@varchar", list[p].varchar);
					para[p].Add("@binary", list[p].binary);
					para[p].Add("@varbinary", list[p].varbinary);
					para[p].Add("@date", list[p].date);
					para[p].Add("@time", list[p].time);
					para[p].Add("@datetime", list[p].datetime);
					para[p].Add("@timestamp", list[p].timestamp);
					para[p].Add("@year", list[p].year);
					para[p].Add("@tinyblob", list[p].tinyblob);
					para[p].Add("@blob", list[p].blob);
					para[p].Add("@mediumblob", list[p].mediumblob);
					para[p].Add("@longblob", list[p].longblob);
					para[p].Add("@tinytext", list[p].tinytext);
					para[p].Add("@text", list[p].text);
					para[p].Add("@mediumtext", list[p].mediumtext);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static datatype GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `dapper-test`.`datatype` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<datatype>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this datatype entity)
		{
			string sql="UPDATE `dapper-test`.`datatype` SET bit=@bit,smallint=@smallint,mediumint=@mediumint,int=@int,integer=@integer,bigint=@bigint,real=@real,double=@double,float=@float,decimal=@decimal,numeric=@numeric,char=@char,varchar=@varchar,binary=@binary,varbinary=@varbinary,date=@date,time=@time,datetime=@datetime,timestamp=@timestamp,year=@year,tinyblob=@tinyblob,blob=@blob,mediumblob=@mediumblob,longblob=@longblob,tinytext=@tinytext,text=@text,mediumtext=@mediumtext WHERE tinyint=@tinyint;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@bit", entity.bit);
				para.Add("@smallint", entity.smallint);
				para.Add("@mediumint", entity.mediumint);
				para.Add("@int", entity.@int);
				para.Add("@integer", entity.integer);
				para.Add("@bigint", entity.bigint);
				para.Add("@real", entity.real);
				para.Add("@double", entity.@double);
				para.Add("@float", entity.@float);
				para.Add("@decimal", entity.@decimal);
				para.Add("@numeric", entity.numeric);
				para.Add("@char", entity.@char);
				para.Add("@varchar", entity.varchar);
				para.Add("@binary", entity.binary);
				para.Add("@varbinary", entity.varbinary);
				para.Add("@date", entity.date);
				para.Add("@time", entity.time);
				para.Add("@datetime", entity.datetime);
				para.Add("@timestamp", entity.timestamp);
				para.Add("@year", entity.year);
				para.Add("@tinyblob", entity.tinyblob);
				para.Add("@blob", entity.blob);
				para.Add("@mediumblob", entity.mediumblob);
				para.Add("@longblob", entity.longblob);
				para.Add("@tinytext", entity.tinytext);
				para.Add("@text", entity.text);
				para.Add("@mediumtext", entity.mediumtext);
		
			para.Add("@tinyint", entity.tinyint);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this datatype entity)
		{
			string sql="DELETE FROM `dapper-test`.`datatype` WHERE tinyint=@tinyint;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@tinyint", entity.tinyint);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<datatype> list)
		{
			string sql="UPDATE `dapper-test`.`datatype` SET bit=@bit,smallint=@smallint,mediumint=@mediumint,int=@int,integer=@integer,bigint=@bigint,real=@real,double=@double,float=@float,decimal=@decimal,numeric=@numeric,char=@char,varchar=@varchar,binary=@binary,varbinary=@varbinary,date=@date,time=@time,datetime=@datetime,timestamp=@timestamp,year=@year,tinyblob=@tinyblob,blob=@blob,mediumblob=@mediumblob,longblob=@longblob,tinytext=@tinytext,text=@text,mediumtext=@mediumtext WHERE tinyint=@tinyint;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@bit", list[p].bit);
				para[p].Add("@smallint", list[p].smallint);
				para[p].Add("@mediumint", list[p].mediumint);
				para[p].Add("@int", list[p].@int);
				para[p].Add("@integer", list[p].integer);
				para[p].Add("@bigint", list[p].bigint);
				para[p].Add("@real", list[p].real);
				para[p].Add("@double", list[p].@double);
				para[p].Add("@float", list[p].@float);
				para[p].Add("@decimal", list[p].@decimal);
				para[p].Add("@numeric", list[p].numeric);
				para[p].Add("@char", list[p].@char);
				para[p].Add("@varchar", list[p].varchar);
				para[p].Add("@binary", list[p].binary);
				para[p].Add("@varbinary", list[p].varbinary);
				para[p].Add("@date", list[p].date);
				para[p].Add("@time", list[p].time);
				para[p].Add("@datetime", list[p].datetime);
				para[p].Add("@timestamp", list[p].timestamp);
				para[p].Add("@year", list[p].year);
				para[p].Add("@tinyblob", list[p].tinyblob);
				para[p].Add("@blob", list[p].blob);
				para[p].Add("@mediumblob", list[p].mediumblob);
				para[p].Add("@longblob", list[p].longblob);
				para[p].Add("@tinytext", list[p].tinytext);
				para[p].Add("@text", list[p].text);
				para[p].Add("@mediumtext", list[p].mediumtext);
			
				para[p].Add("@tinyint", list[p].tinyint);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<datatype> list)
		{
			string sql="DELETE FROM `dapper-test`.`datatype` WHERE tinyint=@tinyint;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@tinyint", list[p].tinyint);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(byte[] primaryKeyArray)
		{
			string sql="DELETE FROM `dapper-test`.`datatype` WHERE tinyint=@tinyint;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@tinyint", primaryKeyArray[p]);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(byte primaryKey)
		{
			string sql="DELETE FROM `dapper-test`.`datatype` WHERE tinyint=@tinyint;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@tinyint", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static datatype GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM `dapper-test`.`datatype` WHERE tinyint=@tinyint;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@tinyint", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<datatype>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<datatype> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM `dapper-test`.`datatype` WHERE {0};", where);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Query<datatype>(sql).AsList<datatype>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="tinyint DESC")
		{
			string sql=string.Format("SELECT * FROM `dapper-test`.`datatype` WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
			string countSql=string.Format("SELECT COUNT(0) FROM `dapper-test`.`datatype` WHERE {0};", where);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<datatype>(sql).AsList<datatype>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
	    }
}

/// <summary>
/// Generated by T4 Template.DO NOT EDIT!
/// </summmary>
namespace Entity.cms 
{
	using System;
	using System.Configuration;
	using System.Collections.Generic;
	using System.Data;
	using MySql.Data.MySqlClient;
	using Dapper;
	
	public class Pager
	{
		public int PageIndex { get; set; }
		public int PageSize { get; set; }
		public int Total { get; set; }
		public int PageCount { get { return (int)Math.Ceiling((double)Total/(double)PageSize); } }
		public object Data { get; set; }
	}
	public class cms_articles
	{
		#region property
		public int id { get; set; }
		public string title { get; set; }
		public string sub_title { get; set; }
		public string content { get; set; }
		public int source { get; set; }
		public string from { get; set; }
		public int category { get; set; }
		public sbyte enabled { get; set; }
		public DateTime created_at { get; set; }
		public DateTime updated_at { get; set; }
		#endregion property
		
	}
	public static class cms_articlesExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		
		public static int Insert(this cms_articles entity)
		{
			string sql="INSERT INTO `cms`.`cms_articles` (title,sub_title,content,source,from,category,enabled,created_at,updated_at)VALUES(@title,@sub_title,@content,@source,@from,@category,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@title", entity.title);
				para.Add("@sub_title", entity.sub_title);
				para.Add("@content", entity.content);
				para.Add("@source", entity.source);
				para.Add("@from", entity.from);
				para.Add("@category", entity.category);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<cms_articles> list)
		{
			string sql="INSERT INTO `cms`.`cms_articles` (title,sub_title,content,source,from,category,enabled,created_at,updated_at)VALUES(@title,@sub_title,@content,@source,@from,@category,@enabled,@created_at,@updated_at);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@title", list[p].title);
					para[p].Add("@sub_title", list[p].sub_title);
					para[p].Add("@content", list[p].content);
					para[p].Add("@source", list[p].source);
					para[p].Add("@from", list[p].from);
					para[p].Add("@category", list[p].category);
					para[p].Add("@enabled", list[p].enabled);
					para[p].Add("@created_at", list[p].created_at);
					para[p].Add("@updated_at", list[p].updated_at);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static cms_articles GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_articles` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_articles>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this cms_articles entity)
		{
			string sql="UPDATE `cms`.`cms_articles` SET title=@title,sub_title=@sub_title,content=@content,source=@source,from=@from,category=@category,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@title", entity.title);
				para.Add("@sub_title", entity.sub_title);
				para.Add("@content", entity.content);
				para.Add("@source", entity.source);
				para.Add("@from", entity.from);
				para.Add("@category", entity.category);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
		
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this cms_articles entity)
		{
			string sql="DELETE FROM `cms`.`cms_articles` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<cms_articles> list)
		{
			string sql="UPDATE `cms`.`cms_articles` SET title=@title,sub_title=@sub_title,content=@content,source=@source,from=@from,category=@category,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@title", list[p].title);
				para[p].Add("@sub_title", list[p].sub_title);
				para[p].Add("@content", list[p].content);
				para[p].Add("@source", list[p].source);
				para[p].Add("@from", list[p].from);
				para[p].Add("@category", list[p].category);
				para[p].Add("@enabled", list[p].enabled);
				para[p].Add("@created_at", list[p].created_at);
				para[p].Add("@updated_at", list[p].updated_at);
			
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<cms_articles> list)
		{
			string sql="DELETE FROM `cms`.`cms_articles` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM `cms`.`cms_articles` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", primaryKeyArray[p]);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM `cms`.`cms_articles` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static cms_articles GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_articles` WHERE id=@id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_articles>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<cms_articles> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_articles` WHERE {0};", where);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Query<cms_articles>(sql).AsList<cms_articles>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="id DESC")
		{
			string sql=string.Format("SELECT * FROM `cms`.`cms_articles` WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
			string countSql=string.Format("SELECT COUNT(0) FROM `cms`.`cms_articles` WHERE {0};", where);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<cms_articles>(sql).AsList<cms_articles>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
	    }
	public class cms_articles_copy
	{
		#region property
		public int id { get; set; }
		public string title { get; set; }
		public string sub_title { get; set; }
		public string content { get; set; }
		public int source { get; set; }
		public string from { get; set; }
		public int category { get; set; }
		public sbyte enabled { get; set; }
		public DateTime created_at { get; set; }
		public DateTime updated_at { get; set; }
		#endregion property
		
	}
	public static class cms_articles_copyExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		
		public static int Insert(this cms_articles_copy entity)
		{
			string sql="INSERT INTO `cms`.`cms_articles_copy` (title,sub_title,content,source,from,category,enabled,created_at,updated_at)VALUES(@title,@sub_title,@content,@source,@from,@category,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@title", entity.title);
				para.Add("@sub_title", entity.sub_title);
				para.Add("@content", entity.content);
				para.Add("@source", entity.source);
				para.Add("@from", entity.from);
				para.Add("@category", entity.category);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<cms_articles_copy> list)
		{
			string sql="INSERT INTO `cms`.`cms_articles_copy` (title,sub_title,content,source,from,category,enabled,created_at,updated_at)VALUES(@title,@sub_title,@content,@source,@from,@category,@enabled,@created_at,@updated_at);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@title", list[p].title);
					para[p].Add("@sub_title", list[p].sub_title);
					para[p].Add("@content", list[p].content);
					para[p].Add("@source", list[p].source);
					para[p].Add("@from", list[p].from);
					para[p].Add("@category", list[p].category);
					para[p].Add("@enabled", list[p].enabled);
					para[p].Add("@created_at", list[p].created_at);
					para[p].Add("@updated_at", list[p].updated_at);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static cms_articles_copy GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_articles_copy` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_articles_copy>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this cms_articles_copy entity)
		{
			string sql="UPDATE `cms`.`cms_articles_copy` SET title=@title,sub_title=@sub_title,content=@content,source=@source,from=@from,category=@category,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@title", entity.title);
				para.Add("@sub_title", entity.sub_title);
				para.Add("@content", entity.content);
				para.Add("@source", entity.source);
				para.Add("@from", entity.from);
				para.Add("@category", entity.category);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
		
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this cms_articles_copy entity)
		{
			string sql="DELETE FROM `cms`.`cms_articles_copy` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<cms_articles_copy> list)
		{
			string sql="UPDATE `cms`.`cms_articles_copy` SET title=@title,sub_title=@sub_title,content=@content,source=@source,from=@from,category=@category,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@title", list[p].title);
				para[p].Add("@sub_title", list[p].sub_title);
				para[p].Add("@content", list[p].content);
				para[p].Add("@source", list[p].source);
				para[p].Add("@from", list[p].from);
				para[p].Add("@category", list[p].category);
				para[p].Add("@enabled", list[p].enabled);
				para[p].Add("@created_at", list[p].created_at);
				para[p].Add("@updated_at", list[p].updated_at);
			
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<cms_articles_copy> list)
		{
			string sql="DELETE FROM `cms`.`cms_articles_copy` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM `cms`.`cms_articles_copy` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", primaryKeyArray[p]);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM `cms`.`cms_articles_copy` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static cms_articles_copy GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_articles_copy` WHERE id=@id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_articles_copy>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<cms_articles_copy> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_articles_copy` WHERE {0};", where);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Query<cms_articles_copy>(sql).AsList<cms_articles_copy>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="id DESC")
		{
			string sql=string.Format("SELECT * FROM `cms`.`cms_articles_copy` WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
			string countSql=string.Format("SELECT COUNT(0) FROM `cms`.`cms_articles_copy` WHERE {0};", where);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<cms_articles_copy>(sql).AsList<cms_articles_copy>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
	    }
	public class cms_categories
	{
		#region property
		public int id { get; set; }
		public string name { get; set; }
		public string description { get; set; }
		public int weight { get; set; }
		public int parent_id { get; set; }
		public sbyte enabled { get; set; }
		public DateTime created_at { get; set; }
		public DateTime updated_at { get; set; }
		#endregion property
		
	}
	public static class cms_categoriesExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		
		public static int Insert(this cms_categories entity)
		{
			string sql="INSERT INTO `cms`.`cms_categories` (name,description,weight,parent_id,enabled,created_at,updated_at)VALUES(@name,@description,@weight,@parent_id,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", entity.name);
				para.Add("@description", entity.description);
				para.Add("@weight", entity.weight);
				para.Add("@parent_id", entity.parent_id);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<cms_categories> list)
		{
			string sql="INSERT INTO `cms`.`cms_categories` (name,description,weight,parent_id,enabled,created_at,updated_at)VALUES(@name,@description,@weight,@parent_id,@enabled,@created_at,@updated_at);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@name", list[p].name);
					para[p].Add("@description", list[p].description);
					para[p].Add("@weight", list[p].weight);
					para[p].Add("@parent_id", list[p].parent_id);
					para[p].Add("@enabled", list[p].enabled);
					para[p].Add("@created_at", list[p].created_at);
					para[p].Add("@updated_at", list[p].updated_at);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static cms_categories GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_categories` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_categories>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this cms_categories entity)
		{
			string sql="UPDATE `cms`.`cms_categories` SET name=@name,description=@description,weight=@weight,parent_id=@parent_id,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", entity.name);
				para.Add("@description", entity.description);
				para.Add("@weight", entity.weight);
				para.Add("@parent_id", entity.parent_id);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
		
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this cms_categories entity)
		{
			string sql="DELETE FROM `cms`.`cms_categories` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<cms_categories> list)
		{
			string sql="UPDATE `cms`.`cms_categories` SET name=@name,description=@description,weight=@weight,parent_id=@parent_id,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@name", list[p].name);
				para[p].Add("@description", list[p].description);
				para[p].Add("@weight", list[p].weight);
				para[p].Add("@parent_id", list[p].parent_id);
				para[p].Add("@enabled", list[p].enabled);
				para[p].Add("@created_at", list[p].created_at);
				para[p].Add("@updated_at", list[p].updated_at);
			
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<cms_categories> list)
		{
			string sql="DELETE FROM `cms`.`cms_categories` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM `cms`.`cms_categories` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", primaryKeyArray[p]);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM `cms`.`cms_categories` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static cms_categories GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_categories` WHERE id=@id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_categories>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<cms_categories> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_categories` WHERE {0};", where);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Query<cms_categories>(sql).AsList<cms_categories>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="id DESC")
		{
			string sql=string.Format("SELECT * FROM `cms`.`cms_categories` WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
			string countSql=string.Format("SELECT COUNT(0) FROM `cms`.`cms_categories` WHERE {0};", where);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<cms_categories>(sql).AsList<cms_categories>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
	    }
	public class cms_migrations
	{
		#region property
		public string migration { get; set; }
		public int batch { get; set; }
		#endregion property
		
	}
	public static class cms_migrationsExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		
		public static int Insert(this cms_migrations entity)
		{
			string sql="INSERT INTO `cms`.`cms_migrations` (migration,batch)VALUES(@migration,@batch);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@migration", entity.migration);
				para.Add("@batch", entity.batch);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<cms_migrations> list)
		{
			string sql="INSERT INTO `cms`.`cms_migrations` (migration,batch)VALUES(@migration,@batch);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@migration", list[p].migration);
					para[p].Add("@batch", list[p].batch);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static cms_migrations GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_migrations` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_migrations>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

    }
	public class cms_modules
	{
		#region property
		public int id { get; set; }
		public string name { get; set; }
		public string uri { get; set; }
		public string controller { get; set; }
		public string action { get; set; }
		public int type { get; set; }
		public string icon { get; set; }
		public int parent_id { get; set; }
		public int weight { get; set; }
		public sbyte enabled { get; set; }
		public DateTime created_at { get; set; }
		public DateTime updated_at { get; set; }
		#endregion property
		
	}
	public static class cms_modulesExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		
		public static int Insert(this cms_modules entity)
		{
			string sql="INSERT INTO `cms`.`cms_modules` (name,uri,controller,action,type,icon,parent_id,weight,enabled,created_at,updated_at)VALUES(@name,@uri,@controller,@action,@type,@icon,@parent_id,@weight,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", entity.name);
				para.Add("@uri", entity.uri);
				para.Add("@controller", entity.controller);
				para.Add("@action", entity.action);
				para.Add("@type", entity.type);
				para.Add("@icon", entity.icon);
				para.Add("@parent_id", entity.parent_id);
				para.Add("@weight", entity.weight);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<cms_modules> list)
		{
			string sql="INSERT INTO `cms`.`cms_modules` (name,uri,controller,action,type,icon,parent_id,weight,enabled,created_at,updated_at)VALUES(@name,@uri,@controller,@action,@type,@icon,@parent_id,@weight,@enabled,@created_at,@updated_at);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@name", list[p].name);
					para[p].Add("@uri", list[p].uri);
					para[p].Add("@controller", list[p].controller);
					para[p].Add("@action", list[p].action);
					para[p].Add("@type", list[p].type);
					para[p].Add("@icon", list[p].icon);
					para[p].Add("@parent_id", list[p].parent_id);
					para[p].Add("@weight", list[p].weight);
					para[p].Add("@enabled", list[p].enabled);
					para[p].Add("@created_at", list[p].created_at);
					para[p].Add("@updated_at", list[p].updated_at);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static cms_modules GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_modules` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_modules>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this cms_modules entity)
		{
			string sql="UPDATE `cms`.`cms_modules` SET name=@name,uri=@uri,controller=@controller,action=@action,type=@type,icon=@icon,parent_id=@parent_id,weight=@weight,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", entity.name);
				para.Add("@uri", entity.uri);
				para.Add("@controller", entity.controller);
				para.Add("@action", entity.action);
				para.Add("@type", entity.type);
				para.Add("@icon", entity.icon);
				para.Add("@parent_id", entity.parent_id);
				para.Add("@weight", entity.weight);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
		
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this cms_modules entity)
		{
			string sql="DELETE FROM `cms`.`cms_modules` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<cms_modules> list)
		{
			string sql="UPDATE `cms`.`cms_modules` SET name=@name,uri=@uri,controller=@controller,action=@action,type=@type,icon=@icon,parent_id=@parent_id,weight=@weight,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@name", list[p].name);
				para[p].Add("@uri", list[p].uri);
				para[p].Add("@controller", list[p].controller);
				para[p].Add("@action", list[p].action);
				para[p].Add("@type", list[p].type);
				para[p].Add("@icon", list[p].icon);
				para[p].Add("@parent_id", list[p].parent_id);
				para[p].Add("@weight", list[p].weight);
				para[p].Add("@enabled", list[p].enabled);
				para[p].Add("@created_at", list[p].created_at);
				para[p].Add("@updated_at", list[p].updated_at);
			
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<cms_modules> list)
		{
			string sql="DELETE FROM `cms`.`cms_modules` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM `cms`.`cms_modules` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", primaryKeyArray[p]);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM `cms`.`cms_modules` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static cms_modules GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_modules` WHERE id=@id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_modules>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<cms_modules> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_modules` WHERE {0};", where);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Query<cms_modules>(sql).AsList<cms_modules>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="id DESC")
		{
			string sql=string.Format("SELECT * FROM `cms`.`cms_modules` WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
			string countSql=string.Format("SELECT COUNT(0) FROM `cms`.`cms_modules` WHERE {0};", where);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<cms_modules>(sql).AsList<cms_modules>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
	    }
	public class cms_password_resets
	{
		#region property
		public string email { get; set; }
		public string token { get; set; }
		public DateTime created_at { get; set; }
		#endregion property
		
	}
	public static class cms_password_resetsExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		
		public static int Insert(this cms_password_resets entity)
		{
			string sql="INSERT INTO `cms`.`cms_password_resets` (email,token,created_at)VALUES(@email,@token,@created_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@email", entity.email);
				para.Add("@token", entity.token);
				para.Add("@created_at", entity.created_at);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<cms_password_resets> list)
		{
			string sql="INSERT INTO `cms`.`cms_password_resets` (email,token,created_at)VALUES(@email,@token,@created_at);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@email", list[p].email);
					para[p].Add("@token", list[p].token);
					para[p].Add("@created_at", list[p].created_at);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static cms_password_resets GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_password_resets` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_password_resets>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

    }
	public class cms_roles
	{
		#region property
		public int id { get; set; }
		public string name { get; set; }
		public int weight { get; set; }
		public sbyte enabled { get; set; }
		public string module_id { get; set; }
		public DateTime created_at { get; set; }
		public DateTime updated_at { get; set; }
		#endregion property
		
	}
	public static class cms_rolesExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		
		public static int Insert(this cms_roles entity)
		{
			string sql="INSERT INTO `cms`.`cms_roles` (name,weight,enabled,module_id,created_at,updated_at)VALUES(@name,@weight,@enabled,@module_id,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", entity.name);
				para.Add("@weight", entity.weight);
				para.Add("@enabled", entity.enabled);
				para.Add("@module_id", entity.module_id);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<cms_roles> list)
		{
			string sql="INSERT INTO `cms`.`cms_roles` (name,weight,enabled,module_id,created_at,updated_at)VALUES(@name,@weight,@enabled,@module_id,@created_at,@updated_at);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@name", list[p].name);
					para[p].Add("@weight", list[p].weight);
					para[p].Add("@enabled", list[p].enabled);
					para[p].Add("@module_id", list[p].module_id);
					para[p].Add("@created_at", list[p].created_at);
					para[p].Add("@updated_at", list[p].updated_at);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static cms_roles GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_roles` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_roles>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this cms_roles entity)
		{
			string sql="UPDATE `cms`.`cms_roles` SET name=@name,weight=@weight,enabled=@enabled,module_id=@module_id,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", entity.name);
				para.Add("@weight", entity.weight);
				para.Add("@enabled", entity.enabled);
				para.Add("@module_id", entity.module_id);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
		
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this cms_roles entity)
		{
			string sql="DELETE FROM `cms`.`cms_roles` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<cms_roles> list)
		{
			string sql="UPDATE `cms`.`cms_roles` SET name=@name,weight=@weight,enabled=@enabled,module_id=@module_id,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@name", list[p].name);
				para[p].Add("@weight", list[p].weight);
				para[p].Add("@enabled", list[p].enabled);
				para[p].Add("@module_id", list[p].module_id);
				para[p].Add("@created_at", list[p].created_at);
				para[p].Add("@updated_at", list[p].updated_at);
			
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<cms_roles> list)
		{
			string sql="DELETE FROM `cms`.`cms_roles` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM `cms`.`cms_roles` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", primaryKeyArray[p]);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM `cms`.`cms_roles` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static cms_roles GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_roles` WHERE id=@id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_roles>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<cms_roles> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_roles` WHERE {0};", where);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Query<cms_roles>(sql).AsList<cms_roles>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="id DESC")
		{
			string sql=string.Format("SELECT * FROM `cms`.`cms_roles` WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
			string countSql=string.Format("SELECT COUNT(0) FROM `cms`.`cms_roles` WHERE {0};", where);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<cms_roles>(sql).AsList<cms_roles>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
	    }
	public class cms_users
	{
		#region property
		public int id { get; set; }
		public string user_name { get; set; }
		public string password { get; set; }
		public string real_name { get; set; }
		public int role_id { get; set; }
		public sbyte enabled { get; set; }
		public DateTime created_at { get; set; }
		public DateTime updated_at { get; set; }
		#endregion property
		
	}
	public static class cms_usersExten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		
		public static int Insert(this cms_users entity)
		{
			string sql="INSERT INTO `cms`.`cms_users` (user_name,password,real_name,role_id,enabled,created_at,updated_at)VALUES(@user_name,@password,@real_name,@role_id,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@user_name", entity.user_name);
				para.Add("@password", entity.password);
				para.Add("@real_name", entity.real_name);
				para.Add("@role_id", entity.role_id);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
							
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<cms_users> list)
		{
			string sql="INSERT INTO `cms`.`cms_users` (user_name,password,real_name,role_id,enabled,created_at,updated_at)VALUES(@user_name,@password,@real_name,@role_id,@enabled,@created_at,@updated_at);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
					para[p].Add("@user_name", list[p].user_name);
					para[p].Add("@password", list[p].password);
					para[p].Add("@real_name", list[p].real_name);
					para[p].Add("@role_id", list[p].role_id);
					para[p].Add("@enabled", list[p].enabled);
					para[p].Add("@created_at", list[p].created_at);
					para[p].Add("@updated_at", list[p].updated_at);
			
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static cms_users GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_users` WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_users>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static int Update(this cms_users entity)
		{
			string sql="UPDATE `cms`.`cms_users` SET user_name=@user_name,password=@password,real_name=@real_name,role_id=@role_id,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
				para.Add("@user_name", entity.user_name);
				para.Add("@password", entity.password);
				para.Add("@real_name", entity.real_name);
				para.Add("@role_id", entity.role_id);
				para.Add("@enabled", entity.enabled);
				para.Add("@created_at", entity.created_at);
				para.Add("@updated_at", entity.updated_at);
		
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this cms_users entity)
		{
			string sql="DELETE FROM `cms`.`cms_users` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
			para.Add("@id", entity.id);	
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<cms_users> list)
		{
			string sql="UPDATE `cms`.`cms_users` SET user_name=@user_name,password=@password,real_name=@real_name,role_id=@role_id,enabled=@enabled,created_at=@created_at,updated_at=@updated_at WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@user_name", list[p].user_name);
				para[p].Add("@password", list[p].password);
				para[p].Add("@real_name", list[p].real_name);
				para[p].Add("@role_id", list[p].role_id);
				para[p].Add("@enabled", list[p].enabled);
				para[p].Add("@created_at", list[p].created_at);
				para[p].Add("@updated_at", list[p].updated_at);
			
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<cms_users> list)
		{
			string sql="DELETE FROM `cms`.`cms_users` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", list[p].id);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(int[] primaryKeyArray)
		{
			string sql="DELETE FROM `cms`.`cms_users` WHERE id=@id;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("@id", primaryKeyArray[p]);
			}				
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(int primaryKey)
		{
			string sql="DELETE FROM `cms`.`cms_users` WHERE id=@id;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static cms_users GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_users` WHERE id=@id;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("@id", primaryKey);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<cms_users>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<cms_users> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM `cms`.`cms_users` WHERE {0};", where);		
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					return con.Query<cms_users>(sql).AsList<cms_users>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="id DESC")
		{
			string sql=string.Format("SELECT * FROM `cms`.`cms_users` WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
			string countSql=string.Format("SELECT COUNT(0) FROM `cms`.`cms_users` WHERE {0};", where);
			using(var con = new MySqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<cms_users>(sql).AsList<cms_users>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
	    }
}



