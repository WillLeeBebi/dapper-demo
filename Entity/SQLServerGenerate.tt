<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)/Model.Common/bin/debug/Model.Common.dll" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>


<#
	Model.Common.Entity.DataBase[] database= new  Model.Common.Entity.DataBase[]{
					new Model.Common.Entity.DataBase() {
						DataBaseName="test",
						DbType=Model.Common.Entity.DatabaseType.SQLServer,
						NameSpace="test",
						ConnectionString="Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=test;Integrated Security=True;Pooling=False"
					 }
				};
	foreach(var db in database)
	{
		var access=new Model.Common.SQLServerDataStructure(db.ConnectionString);
		List<Model.Common.Entity.Table> tables=access.GetTables(db.DataBaseName);
#>
/// <summary>
/// Generated by T4 Template.DO NOT EDIT!
/// </summmary>
namespace Entity.<#=db.NameSpace.Replace("-","_") #> 
{
	using System;
	using System.Configuration;
	using System.Collections.Generic;
	using System.Data;
	using System.Data.SqlClient;
	using Dapper;
	
	public class Pager
	{
		public int PageIndex { get; set; }
		public int PageSize { get; set; }
		public int Total { get; set; }
		public int PageCount { get { return (int)Math.Ceiling((double)Total/(double)PageSize); } }
		public object Data { get; set; }
	}
<#
	foreach(var item in tables)
	{
		
		var primaryKey=item.Columns.FirstOrDefault(m=>m.IsPrimaryKey||m.IsAutoIncrease);
		var primary = primaryKey==null?"":primaryKey.Name;
#>
	public class <#=item.TableName #>
	{
		#region property
<#
		foreach(var col in item.Columns)
        {
			var typeName=string.Empty;
			var type = new Model.Common.DataType().SqlDataType[col.DataType];
			if(type==null)
				throw new NullReferenceException();
			typeName=Formater.FormatNullable(type.ToString(),col.IsNullable);
#>
		public <#=typeName #> <#=Formater.FormatPropName(col.Name) #> { get; set; }
<#
	}
#>
		#endregion property
		
	}
	public static class <#=item.TableName #>Exten
	{
		private static string _connectionString = ConfigurationManager.ConnectionStrings["<#=db.DataBaseName #>"].ToString();
<#
		if(item.Type==(int)Model.Common.Entity.TableType.DataTable)
        {
			//原始表格可以生成insert方法
#>

		public static int Insert(this <#=item.TableName #> entity)
		{
<#
			var fields = item.Columns.Where(m=>!m.IsAutoIncrease).Select(m=>m.Name).ToArray();
#>
			string sql="INSERT INTO <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> (<#=string.Join(",", fields)#>)VALUES(<#=string.Join(",", fields.Select(m=>string.Format("@{0}",m)).ToArray())#>);";
			DynamicParameters para =new DynamicParameters();
<#
			for(var i=0;i< fields.Length;i++)
			{
#>
				para.Add("<#=string.Format("@{0}",fields[i]) #>", entity.<#=Formater.FormatPropName(fields[i]) #>);
<#
            }
#>							
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Insert(this List<<#=item.TableName #>> list)
		{
			string sql="INSERT INTO <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> (<#=string.Join(",", fields)#>)VALUES(<#=string.Join(",", fields.Select(m=>string.Format("@{0}",m)).ToArray())#>);";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
<#
				for(var i=0;i< fields.Length;i++)
				{
#>
					para[p].Add("<#=string.Format("@{0}",fields[i]) #>", list[p].<#=Formater.FormatPropName(fields[i]) #>);
<#
				}
#>			
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

<#
		if(primaryKey!=null)
        {
			//是原始表格且有主键或者自增字段时，生成update，delete，getmodel等方法
			var updateFields=item.Columns.Where(m=>!m.IsPrimaryKey&&!m.IsAutoIncrease).Select(m=>string.Format("{0}=@{0}",m.Name)).ToArray();
			var pkTypeName=new Model.Common.DataType().SqlDataType[primaryKey.DataType].ToString();
#>

		public static int Update(this <#=item.TableName #> entity)
		{
			string sql="UPDATE <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> SET <#=string.Join(",",updateFields) #> WHERE <#=string.Format("{0}=@{0}",primary) #>;";
			DynamicParameters para =new DynamicParameters();
<#
			for(var i=0;i< fields.Length;i++)
			{
#>
				para.Add("<#=string.Format("@{0}",fields[i]) #>", entity.<#=Formater.FormatPropName(fields[i]) #>);
<#
            }
#>		
			para.Add("<#=string.Format("@{0}",primary) #>", entity.<#=Formater.FormatPropName(primary) #>);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this <#=item.TableName #> entity)
		{
			string sql="DELETE FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE <#=string.Format("{0}=@{0}",primary) #>;";
			DynamicParameters para =new DynamicParameters();
			para.Add("<#=string.Format("@{0}",primary) #>", entity.<#=Formater.FormatPropName(primary) #>);	
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Update(this List<<#=item.TableName #>> list)
		{
			string sql="UPDATE <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> SET <#=string.Join(",",updateFields) #> WHERE <#=string.Format("{0}=@{0}",primary) #>;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
<#
				for(var i=0;i< fields.Length;i++)
				{
#>
				para[p].Add("<#=string.Format("@{0}",fields[i]) #>", list[p].<#=Formater.FormatPropName(fields[i]) #>);
<#
				}
#>			
				para[p].Add("<#=string.Format("@{0}", primary) #>", list[p].<#=Formater.FormatPropName(primary) #>);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(this List<<#=item.TableName #>> list)
		{
			string sql="DELETE FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE <#=string.Format("{0}=@{0}",primary) #>;";
			DynamicParameters[] para =new DynamicParameters[list.Count];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("<#=string.Format("@{0}",primary) #>", list[p].<#=Formater.FormatPropName(primary) #>);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		
		public static int Delete(<#=pkTypeName #>[] primaryKeyArray)
		{
			string sql="DELETE FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE <#=string.Format("{0}=@{0}",primary) #>;";
			DynamicParameters[] para =new DynamicParameters[primaryKeyArray.Length];
			for(var p =0;p < para.Length; p++)
			{
				para[p]=new DynamicParameters();
				para[p].Add("<#=string.Format("@{0}",primary) #>", primaryKeyArray[p]);
			}				
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}

		public static int Delete(<#=pkTypeName #> primaryKey)
		{
			string sql="DELETE FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE <#=string.Format("{0}=@{0}",primary) #>;";
			DynamicParameters para =new DynamicParameters();
		    para.Add("<#=string.Format("@{0}",primary) #>", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}


		public static <#=item.TableName #> GetModel(object primaryKey)
		{
			string sql = string.Format("SELECT * FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE <#=string.Format("{0}=@{0}", primary) #>;");		
			DynamicParameters para =new DynamicParameters();
		    para.Add("<#=string.Format("@{0}",primary) #>", primaryKey);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<<#=item.TableName #>>(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
<#
	}//以上生成是原始表格并且有主键的表方法
}//if(item.Type==(int)Model.Common.Entity.TableType.DataTable)
#>
		
		public static <#=item.TableName #> GetModel(string where, string orderByField)
		{
			string sql = string.Format("SELECT * FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE {0} ORDER BY {1};", where, orderByField);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.QueryFirst<<#=item.TableName #>>(sql);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
		
		public static List<<#=item.TableName #>> GetList(string where)
		{
			string sql = string.Format("SELECT * FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE {0};", where);		
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					return con.Query<<#=item.TableName #>>(sql).AsList<<#=item.TableName #>>();
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}

		public static Pager GetPageList(int pageIndex, int pageSize, string where="1=1", string orderField="<#=primary #> DESC")
		{
<#
		if(db.DbType == Model.Common.Entity.DatabaseType.MySql)
        {
#>
			string sql=string.Format("SELECT * FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE {0} ORDER BY {1} LIMIT {2},{3}",where, orderField, (pageIndex-1)* pageSize, pageSize);
<#
        }
		else
        {
#>
			string sql=string.Format("SELECT TOP {0} * FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE {1} AND <#=primary #> NOT IN (SELECT TOP {2} <#=primary #> FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE {1}) ORDER BY {3};", pageSize, where, (pageIndex-1)*pageSize, orderField);
<#
        }
#>
			string countSql=string.Format("SELECT COUNT(0) FROM <#=Formater.ForamtDbName(item.DatabaseName, db.DbType) #>.<#=Formater.ForamtDbName(item.TableName,db.DbType) #> WHERE {0};", where);
			using(var con = new SqlConnection(_connectionString))
			{
				try {
					var count = con.ExecuteScalar<int>(countSql);
					var list = con.Query<<#=item.TableName #>>(sql).AsList<<#=item.TableName #>>();
					return new Pager()
					{
						PageIndex = pageIndex,
						PageSize = pageSize,
						Total = count,
						Data = list
					};
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return null;
				}
			}
		}
    }
<#
	}
#>
}

<#
}
#>

<#@include file="Formater.ttinclude" #>
