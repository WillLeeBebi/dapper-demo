

/// <summary>
/// Generated by T4 Template.DO NOT EDIT!
/// </summmary>
namespace Entity.dapper_test 
{
	using System;
	using System.Configuration;
	using System.Data;
	using MySql.Data.MySqlClient;
	using Dapper;
	
	public class Test
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["dapper-test"].ToString();
		public int id { get; set; }
		public string name { get; set; }
		public DateTime Time { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `dapper-test`.`Test` (name,Time)VALUES(@name,@Time);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", this.name);
				para.Add("@Time", this.Time);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
	public class all_test
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["dapper-test"].ToString();
		public int id { get; set; }
		public string name { get; set; }
		public DateTime Time { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `dapper-test`.`all_test` (id,name,Time)VALUES(@id,@name,@Time);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@id", this.id);
				para.Add("@name", this.name);
				para.Add("@Time", this.Time);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
}

/// <summary>
/// Generated by T4 Template.DO NOT EDIT!
/// </summmary>
namespace Entity.cms 
{
	using System;
	using System.Configuration;
	using System.Data;
	using MySql.Data.MySqlClient;
	using Dapper;
	
	public class cms_articles
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		public int id { get; set; }
		public string title { get; set; }
		public string sub_title { get; set; }
		public string content { get; set; }
		public int source { get; set; }
		public string from { get; set; }
		public int category { get; set; }
		public Byte enabled { get; set; }
		public TimeSpan created_at { get; set; }
		public TimeSpan updated_at { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `cms`.`cms_articles` (title,sub_title,content,source,from,category,enabled,created_at,updated_at)VALUES(@title,@sub_title,@content,@source,@from,@category,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@title", this.title);
				para.Add("@sub_title", this.sub_title);
				para.Add("@content", this.content);
				para.Add("@source", this.source);
				para.Add("@from", this.from);
				para.Add("@category", this.category);
				para.Add("@enabled", this.enabled);
				para.Add("@created_at", this.created_at);
				para.Add("@updated_at", this.updated_at);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
	public class cms_categories
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		public int id { get; set; }
		public string name { get; set; }
		public string description { get; set; }
		public int weight { get; set; }
		public int parent_id { get; set; }
		public Byte enabled { get; set; }
		public TimeSpan created_at { get; set; }
		public TimeSpan updated_at { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `cms`.`cms_categories` (name,description,weight,parent_id,enabled,created_at,updated_at)VALUES(@name,@description,@weight,@parent_id,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", this.name);
				para.Add("@description", this.description);
				para.Add("@weight", this.weight);
				para.Add("@parent_id", this.parent_id);
				para.Add("@enabled", this.enabled);
				para.Add("@created_at", this.created_at);
				para.Add("@updated_at", this.updated_at);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
	public class cms_migrations
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		public string migration { get; set; }
		public int batch { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `cms`.`cms_migrations` (migration,batch)VALUES(@migration,@batch);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@migration", this.migration);
				para.Add("@batch", this.batch);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
	public class cms_modules
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		public int id { get; set; }
		public string name { get; set; }
		public string uri { get; set; }
		public string controller { get; set; }
		public string action { get; set; }
		public int type { get; set; }
		public string icon { get; set; }
		public int parent_id { get; set; }
		public int weight { get; set; }
		public Byte enabled { get; set; }
		public TimeSpan created_at { get; set; }
		public TimeSpan updated_at { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `cms`.`cms_modules` (name,uri,controller,action,type,icon,parent_id,weight,enabled,created_at,updated_at)VALUES(@name,@uri,@controller,@action,@type,@icon,@parent_id,@weight,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", this.name);
				para.Add("@uri", this.uri);
				para.Add("@controller", this.controller);
				para.Add("@action", this.action);
				para.Add("@type", this.type);
				para.Add("@icon", this.icon);
				para.Add("@parent_id", this.parent_id);
				para.Add("@weight", this.weight);
				para.Add("@enabled", this.enabled);
				para.Add("@created_at", this.created_at);
				para.Add("@updated_at", this.updated_at);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
	public class cms_password_resets
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		public string email { get; set; }
		public string token { get; set; }
		public TimeSpan created_at { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `cms`.`cms_password_resets` (email,token,created_at)VALUES(@email,@token,@created_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@email", this.email);
				para.Add("@token", this.token);
				para.Add("@created_at", this.created_at);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
	public class cms_roles
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		public int id { get; set; }
		public string name { get; set; }
		public int weight { get; set; }
		public Byte enabled { get; set; }
		public string module_id { get; set; }
		public TimeSpan created_at { get; set; }
		public TimeSpan updated_at { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `cms`.`cms_roles` (name,weight,enabled,module_id,created_at,updated_at)VALUES(@name,@weight,@enabled,@module_id,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@name", this.name);
				para.Add("@weight", this.weight);
				para.Add("@enabled", this.enabled);
				para.Add("@module_id", this.module_id);
				para.Add("@created_at", this.created_at);
				para.Add("@updated_at", this.updated_at);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
	public class cms_users
	{
		#region property
		private string _connectionString = ConfigurationManager.ConnectionStrings["cms"].ToString();
		public int id { get; set; }
		public string user_name { get; set; }
		public string password { get; set; }
		public string real_name { get; set; }
		public int role_id { get; set; }
		public Byte enabled { get; set; }
		public TimeSpan created_at { get; set; }
		public TimeSpan updated_at { get; set; }
		#endregion property
		
		#region methods
		public int Insert()
		{
			string sql="INSERT INTO `cms`.`cms_users` (user_name,password,real_name,role_id,enabled,created_at,updated_at)VALUES(@user_name,@password,@real_name,@role_id,@enabled,@created_at,@updated_at);";
			DynamicParameters para =new DynamicParameters();
				para.Add("@user_name", this.user_name);
				para.Add("@password", this.password);
				para.Add("@real_name", this.real_name);
				para.Add("@role_id", this.role_id);
				para.Add("@enabled", this.enabled);
				para.Add("@created_at", this.created_at);
				para.Add("@updated_at", this.updated_at);
							
			using(var con=new MySqlConnection(_connectionString))
			{
				try{
					return con.Execute(sql, para);
				}
				catch(Exception e)
				{
					if(con.State != ConnectionState.Closed)
					{
						con.Close();
					}
					return -1;
				}
			}
		}
		#endregion
	}
}

